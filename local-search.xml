<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MA环境onnx转om</title>
    <link href="/2023/09/28/MA%E7%8E%AF%E5%A2%83onnx%E8%BD%ACom/"/>
    <url>/2023/09/28/MA%E7%8E%AF%E5%A2%83onnx%E8%BD%ACom/</url>
    
    <content type="html"><![CDATA[<h1 id="MA环境onnx转om"><a href="#MA环境onnx转om" class="headerlink" title="MA环境onnx转om"></a>MA环境onnx转om</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://gitee.com/ascend/ModelZoo-PyTorch/blob/master/ACL_PyTorch/built-in/cv/Resnet50_Pytorch_Infer/README.md#https://gitee.com/link?target=https%253A%252F%252Fdownload.pytorch.org%252Fmodels%252Fresnet50-0676ba61.pth">Resnet50-推理</a></p><h2 id="pth转onnx"><a href="#pth转onnx" class="headerlink" title="pth转onnx"></a>pth转onnx</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> torch torchvision<br></code></pre></td></tr></table></figure><h3 id="pth转onnx-1"><a href="#pth转onnx-1" class="headerlink" title="pth转onnx"></a>pth转onnx</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import sys<br><br>import torch<br>import torch.onnx<br>import torchvision.models as models<br><br>def convert(pthfile):<br>    model = models.resnet50(<span class="hljs-attribute">pretrained</span>=<span class="hljs-literal">False</span>)<br>    resnet50 = torch.load(pthfile, <span class="hljs-attribute">map_location</span>=<span class="hljs-string">&#x27;cpu&#x27;</span>)<br>    model.load_state_dict(resnet50)<br>    <span class="hljs-built_in">print</span>(model)<br><br>    input_names = [<span class="hljs-string">&quot;actual_input_1&quot;</span>]<br>    output_names = [<span class="hljs-string">&quot;output1&quot;</span>]<br>    dummy_input = torch.randn(16, 3, 224, 224)<br>    torch.onnx.<span class="hljs-built_in">export</span>(<br>        model, <br>        dummy_input,<br>        <span class="hljs-string">&quot;resnet50_official.onnx&quot;</span>,<br>        <span class="hljs-attribute">input_names</span>=input_names, <br>        <span class="hljs-attribute">output_names</span>=output_names, <br>        <span class="hljs-attribute">opset_version</span>=11)<br><br>pthfile = <span class="hljs-string">&#x27;resnet50-0676ba61.pth&#x27;</span> <br>convert(pthfile)<br></code></pre></td></tr></table></figure><h2 id="onnx转om"><a href="#onnx转om" class="headerlink" title="onnx转om"></a>onnx转om</h2><h3 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> onnxruntime<br></code></pre></td></tr></table></figure><h3 id="获取输入输出信息"><a href="#获取输入输出信息" class="headerlink" title="获取输入输出信息"></a>获取输入输出信息</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint<br><span class="hljs-keyword">import</span> onnxruntime<br><br>onnx_path = &quot;resnet50_official.onnx&quot;<br><br>provider = &quot;CPUExecutionProvider&quot;<br>onnx_session = onnxruntime.InferenceSession(onnx_path, providers=[provider])<br><br>print(&quot;----------------- 输入部分 -----------------&quot;)<br>input_tensors = onnx_session.get_inputs()  # 该 API 会返回列表<br><span class="hljs-keyword">for</span> input_tensor <span class="hljs-keyword">in</span> input_tensors:         # 因为可能有多个输入，所以为列表<br>    <br>    input_info = &#123;<br>        &quot;name&quot; : input_tensor.name,<br>        &quot;type&quot; : input_tensor.<span class="hljs-keyword">type</span>,<br>        &quot;shape&quot;: input_tensor.shape,<br>    &#125;<br>    pprint(input_info)<br><br>print(&quot;----------------- 输出部分 -----------------&quot;)<br>output_tensors = onnx_session.get_outputs()  # 该 API 会返回列表<br><span class="hljs-keyword">for</span> output_tensor <span class="hljs-keyword">in</span> output_tensors:         # 因为可能有多个输出，所以为列表<br>    <br>    output_info = &#123;<br>        &quot;name&quot; : output_tensor.name,<br>        &quot;type&quot; : output_tensor.<span class="hljs-keyword">type</span>,<br>        &quot;shape&quot;: output_tensor.shape,<br>    &#125;<br>    pprint(output_info)<br>    <br><br>## 输出<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">(mindspore_py39) [ma-user onnx2om]$python get_model_info.py </span><br><span class="hljs-string">----------------- 输入部分 -----------------</span><br><span class="hljs-string">&#123;&#x27;</span><span class="hljs-type">name</span><span class="hljs-string">&#x27;: &#x27;</span>actual_input_1<span class="hljs-string">&#x27;, &#x27;</span>shap<span class="hljs-string">e&#x27;: [16, 3, 224, 224], &#x27;</span>typ<span class="hljs-string">e&#x27;: &#x27;</span>tensor(<span class="hljs-type">float</span>)<span class="hljs-string">&#x27;&#125;</span><br><span class="hljs-string">----------------- 输出部分 -----------------</span><br><span class="hljs-string">&#123;&#x27;</span><span class="hljs-type">name</span><span class="hljs-string">&#x27;: &#x27;</span>output1<span class="hljs-string">&#x27;, &#x27;</span>shap<span class="hljs-string">e&#x27;: [16, 1000], &#x27;</span>typ<span class="hljs-string">e&#x27;: &#x27;</span>tensor(<span class="hljs-type">float</span>)<span class="hljs-string">&#x27;&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="转换权重"><a href="#转换权重" class="headerlink" title="转换权重"></a>转换权重</h3><p>根据输入信息可知，模型输入一个name为actual_input_1的变量，其shape是[16, 3, 224, 224],转换得到resnet50_bs16.om</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">source /usr/local/Ascend/ascend-toolkit/set_env.sh <br>atc <span class="hljs-attribute">--model</span>=resnet50_official.onnx <span class="hljs-attribute">--framework</span>=5 <span class="hljs-attribute">--output</span>=resnet50_bs16 <span class="hljs-attribute">--input_format</span>=NCHW <span class="hljs-attribute">--input_shape</span>=<span class="hljs-string">&quot;actual_input_1:16,3,224,224&quot;</span> <span class="hljs-attribute">--enable_small_channel</span>=1 <span class="hljs-attribute">--log</span>=error <span class="hljs-attribute">--soc_version</span>=Ascend910A <br></code></pre></td></tr></table></figure><h2 id="om推理测试"><a href="#om推理测试" class="headerlink" title="om推理测试"></a>om推理测试</h2><h3 id="安装依赖-2"><a href="#安装依赖-2" class="headerlink" title="安装依赖"></a>安装依赖</h3><p><a href="https://gitee.com/ascend/tools/tree/master/ais-bench_workload/tool/ais_bench">https://gitee.com/ascend/tools/tree/master/ais-bench_workload/tool/ais_bench</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">(mindspore_py39) [ma-user onnx2om]<span class="hljs-variable">$pip</span> install ./*.whl<br>Looking <span class="hljs-keyword">in</span> indexes: http:<span class="hljs-regexp">//</span>pip.modelarts.private.com:<span class="hljs-number">8888</span><span class="hljs-regexp">/repository/</span>pypi/simple<br>Processing ./aclruntime-<span class="hljs-number">0.0</span>.<span class="hljs-number">2</span>-cp39-cp39-linux_aarch64.whl<br>Processing ./ais_bench-<span class="hljs-number">0.0</span>.<span class="hljs-number">2</span>-py3-none-any.whl<br>Requirement already satisfied: numpy <span class="hljs-keyword">in</span> <span class="hljs-regexp">/home/m</span>a-user<span class="hljs-regexp">/anaconda3/</span>envs<span class="hljs-regexp">/mindspore_py39/</span>lib<span class="hljs-regexp">/python3.9/</span>site-packages (from ais-bench==<span class="hljs-number">0.0</span>.<span class="hljs-number">2</span>) (<span class="hljs-number">1.25</span>.<span class="hljs-number">0</span>)<br>Requirement already satisfied: tqdm <span class="hljs-keyword">in</span> <span class="hljs-regexp">/home/m</span>a-user<span class="hljs-regexp">/anaconda3/</span>envs<span class="hljs-regexp">/mindspore_py39/</span>lib<span class="hljs-regexp">/python3.9/</span>site-packages (from ais-bench==<span class="hljs-number">0.0</span>.<span class="hljs-number">2</span>) (<span class="hljs-number">4.65</span>.<span class="hljs-number">0</span>)<br>Installing collected packages: ais-bench, aclruntime<br>Successfully installed aclruntime-<span class="hljs-number">0.0</span>.<span class="hljs-number">2</span> ais-bench-<span class="hljs-number">0.0</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="om信息打印"><a href="#om信息打印" class="headerlink" title="om信息打印"></a>om信息打印</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">import</span> aclruntime<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>def get_model_info():<br>    device_id = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">options</span> = aclruntime.session_options()<br>    # 方法<span class="hljs-number">1</span>设置级别为<span class="hljs-keyword">debug</span>模式后可以打印模型信息<br>    <span class="hljs-keyword">options</span>.log_level = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">session</span> = aclruntime.InferenceSession(model_path, device_id, <span class="hljs-keyword">options</span>)<br><br>    # 方法<span class="hljs-number">2</span> 直接打印<span class="hljs-keyword">session</span> 也可以获取模型信息<br>    print(<span class="hljs-keyword">session</span>)<br><br>    # 方法<span class="hljs-number">3</span> 也可以直接通过<span class="hljs-keyword">get</span>接口去获取<br>    intensors_desc = <span class="hljs-keyword">session</span>.get_inputs()<br>    <span class="hljs-keyword">for</span> i, <span class="hljs-keyword">info</span> <span class="hljs-keyword">in</span> enumerate(intensors_desc):<br>        print(&quot;input info i:&#123;&#125; shape:&#123;&#125; type:&#123;&#125; val:&#123;&#125; realsize:&#123;&#125; size:&#123;&#125;&quot;.format(<br>            i, <span class="hljs-keyword">info</span>.shape, <span class="hljs-keyword">info</span>.datatype, <span class="hljs-type">int</span>(<span class="hljs-keyword">info</span>.datatype), <span class="hljs-keyword">info</span>.realsize, <span class="hljs-keyword">info</span>.size))<br><br>    intensors_desc = <span class="hljs-keyword">session</span>.get_outputs()<br>    <span class="hljs-keyword">for</span> i, <span class="hljs-keyword">info</span> <span class="hljs-keyword">in</span> enumerate(intensors_desc):<br>        print(&quot;outputs info i:&#123;&#125; shape:&#123;&#125; type:&#123;&#125; val:&#123;&#125; realsize:&#123;&#125; size:&#123;&#125;&quot;.format(<br>            i, <span class="hljs-keyword">info</span>.shape, <span class="hljs-keyword">info</span>.datatype, <span class="hljs-type">int</span>(<span class="hljs-keyword">info</span>.datatype), <span class="hljs-keyword">info</span>.realsize, <span class="hljs-keyword">info</span>.size))<br><br>         <br>device_id = <span class="hljs-number">0</span><br>model_path = <span class="hljs-string">&#x27;./resnet50_bs16.om&#x27;</span><br>get_model_info()   <br> <br></code></pre></td></tr></table></figure><h3 id="om推理示例"><a href="#om推理示例" class="headerlink" title="om推理示例"></a>om推理示例</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import sys<br><br>import aclruntime<br>import numpy <span class="hljs-keyword">as</span> np<br><br>model_path = &#x27;./resnet50_bs16.om&#x27;<br><br># 最短运行样例<br>def infer<span class="hljs-constructor">_simple()</span>:<br>    device_id = <span class="hljs-number">0</span><br>    options = aclruntime.session<span class="hljs-constructor">_options()</span><br>    session = aclruntime.<span class="hljs-constructor">InferenceSession(<span class="hljs-params">model_path</span>, <span class="hljs-params">device_id</span>, <span class="hljs-params">options</span>)</span><br><br>    # create <span class="hljs-keyword">new</span> numpy data according inputs info<br>    barray = bytearray(session.get<span class="hljs-constructor">_inputs()</span><span class="hljs-literal">[<span class="hljs-number">0</span>]</span>.realsize)<br>    ndata = np.frombuffer(barray)<br>    # convert numpy <span class="hljs-keyword">to</span> pytensors <span class="hljs-keyword">in</span> device<br>    tensor = aclruntime.<span class="hljs-constructor">Tensor(<span class="hljs-params">ndata</span>)</span><br>    tensor.<span class="hljs-keyword">to</span><span class="hljs-constructor">_device(<span class="hljs-params">device_id</span>)</span><br><br>    outnames = <span class="hljs-literal">[ <span class="hljs-identifier">session</span>.<span class="hljs-identifier">get_outputs</span>()[<span class="hljs-number">0</span>]</span>.name ]<br>    feeds = &#123; session.get<span class="hljs-constructor">_inputs()</span><span class="hljs-literal">[<span class="hljs-number">0</span>]</span>.name : tensor&#125;<br><br>    outputs = session.run(outnames, feeds)<br>    print(<span class="hljs-string">&quot;outputs:&quot;</span>, outputs)<br><br>    outarray = <span class="hljs-literal">[]</span><br>    <span class="hljs-keyword">for</span> out <span class="hljs-keyword">in</span> outputs:<br>        # convert acltenor <span class="hljs-keyword">to</span> host memory<br>        out.<span class="hljs-keyword">to</span><span class="hljs-constructor">_host()</span><br>        # convert acltensor <span class="hljs-keyword">to</span> numpy <span class="hljs-built_in">array</span><br>        outarray.append(np.<span class="hljs-built_in">array</span>(out))<br>    # summary inference throughput<br>    print(<span class="hljs-string">&quot;infer avg:&#123;&#125; ms&quot;</span>.format(np.mean(session.sumary<span class="hljs-literal">()</span>.exec_time_list)))<br>    <br>infer<span class="hljs-constructor">_simple()</span>  <br></code></pre></td></tr></table></figure><h2 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h2><h3 id="onnx结果"><a href="#onnx结果" class="headerlink" title="onnx结果"></a>onnx结果</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import onnxruntime<br>import numpy as np<br><br>sess = onnxruntime<span class="hljs-selector-class">.InferenceSession</span>(<span class="hljs-string">&#x27;resnet50_official.onnx&#x27;</span>, providers=<span class="hljs-selector-attr">[ <span class="hljs-string">&#x27;CPUExecutionProvider&#x27;</span>,]</span>)<br><span class="hljs-selector-tag">a</span> = np<span class="hljs-selector-class">.ones</span>((<span class="hljs-number">16</span>,<span class="hljs-number">3</span>, <span class="hljs-number">224</span>, <span class="hljs-number">224</span>))<span class="hljs-selector-class">.astype</span>(np.float32)<br><br>output = sess<span class="hljs-selector-class">.run</span>(<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;output1&#x27;</span>]</span>, &#123;<span class="hljs-string">&#x27;actual_input_1&#x27;</span>: <span class="hljs-selector-tag">a</span>,&#125;)<span class="hljs-selector-attr">[0]</span><br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(output)</span></span><br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dns">[[-<span class="hljs-number">0.30805793</span>  <span class="hljs-number">0.07984409</span> -<span class="hljs-number">1.1900382</span>  ... -<span class="hljs-number">1.6530751</span>   <span class="hljs-number">0.11777535</span><br>   <span class="hljs-number">0.24357179</span>]<br> [-<span class="hljs-number">0.30805793</span>  <span class="hljs-number">0.07984409</span> -<span class="hljs-number">1.1900382</span>  ... -<span class="hljs-number">1.6530751</span>   <span class="hljs-number">0.11777535</span><br>   <span class="hljs-number">0.24357179</span>]<br> [-<span class="hljs-number">0.30805793</span>  <span class="hljs-number">0.07984409</span> -<span class="hljs-number">1.1900382</span>  ... -<span class="hljs-number">1.6530751</span>   <span class="hljs-number">0.11777535</span><br>   <span class="hljs-number">0.24357179</span>]<br> ...<br> [-<span class="hljs-number">0.30805793</span>  <span class="hljs-number">0.07984409</span> -<span class="hljs-number">1.1900382</span>  ... -<span class="hljs-number">1.6530751</span>   <span class="hljs-number">0.11777535</span><br>   <span class="hljs-number">0.24357179</span>]<br> [-<span class="hljs-number">0.30805793</span>  <span class="hljs-number">0.07984409</span> -<span class="hljs-number">1.1900382</span>  ... -<span class="hljs-number">1.6530751</span>   <span class="hljs-number">0.11777535</span><br>   <span class="hljs-number">0.24357179</span>]<br> [-<span class="hljs-number">0.30805793</span>  <span class="hljs-number">0.07984409</span> -<span class="hljs-number">1.1900382</span>  ... -<span class="hljs-number">1.6530751</span>   <span class="hljs-number">0.11777535</span><br>   <span class="hljs-number">0.24357179</span>]]<br></code></pre></td></tr></table></figure><h3 id="om结果"><a href="#om结果" class="headerlink" title="om结果"></a>om结果</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import sys<br><br>import aclruntime<br>import numpy <span class="hljs-keyword">as</span> np<br><br>model_path = &#x27;./resnet50_bs16.om&#x27;<br><br># 最短运行样例<br>def infer<span class="hljs-constructor">_simple()</span>:<br>    device_id = <span class="hljs-number">0</span><br>    options = aclruntime.session<span class="hljs-constructor">_options()</span><br>    session = aclruntime.<span class="hljs-constructor">InferenceSession(<span class="hljs-params">model_path</span>, <span class="hljs-params">device_id</span>, <span class="hljs-params">options</span>)</span><br><br>    # create <span class="hljs-keyword">new</span> numpy data according inputs info<br>    barray = bytearray(session.get<span class="hljs-constructor">_inputs()</span><span class="hljs-literal">[<span class="hljs-number">0</span>]</span>.realsize)<br>    ndata = np.frombuffer(barray)<br>    # convert numpy <span class="hljs-keyword">to</span> pytensors <span class="hljs-keyword">in</span> device<br>    a = np.ones((<span class="hljs-number">64</span>,<span class="hljs-number">3</span>, <span class="hljs-number">224</span>, <span class="hljs-number">224</span>)).astype(np.float32)<br>    tensor = aclruntime.<span class="hljs-constructor">Tensor(<span class="hljs-params">a</span>)</span><br>    tensor.<span class="hljs-keyword">to</span><span class="hljs-constructor">_device(<span class="hljs-params">device_id</span>)</span><br><br>    outnames = <span class="hljs-literal">[ <span class="hljs-identifier">session</span>.<span class="hljs-identifier">get_outputs</span>()[<span class="hljs-number">0</span>]</span>.name ]<br>    feeds = &#123; session.get<span class="hljs-constructor">_inputs()</span><span class="hljs-literal">[<span class="hljs-number">0</span>]</span>.name : tensor&#125;<br><br>    outputs = session.run(outnames, feeds)<br>    print(<span class="hljs-string">&quot;outputs:&quot;</span>, outputs)<br><br>    outarray = <span class="hljs-literal">[]</span><br>    <span class="hljs-keyword">for</span> out <span class="hljs-keyword">in</span> outputs:<br>        # convert acltenor <span class="hljs-keyword">to</span> host memory<br>        out.<span class="hljs-keyword">to</span><span class="hljs-constructor">_host()</span><br>        # convert acltensor <span class="hljs-keyword">to</span> numpy <span class="hljs-built_in">array</span><br>        outarray.append(np.<span class="hljs-built_in">array</span>(out))<br>    print(outarray)<br>    # summary inference throughput<br>    print(<span class="hljs-string">&quot;infer avg:&#123;&#125; ms&quot;</span>.format(np.mean(session.sumary<span class="hljs-literal">()</span>.exec_time_list)))<br>    <br>infer<span class="hljs-constructor">_simple()</span>  <br><br><br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dns">INFO] acl init success<br>[INFO] open device <span class="hljs-number">0</span> success<br>[INFO] load model ./resnet50_bs16.om success<br>[INFO] create model description success<br>outputs: [&lt;Tensor&gt;<br>shape:  (<span class="hljs-number">16</span>, <span class="hljs-number">1000</span>)<br>dtype:  float32<br>device: <span class="hljs-number">0</span>]<br>[array([[-<span class="hljs-number">0.30737305</span>,  <span class="hljs-number">0.0791626</span> , -<span class="hljs-number">1</span>.<span class="hljs-number">1875</span>    , ..., -<span class="hljs-number">1.6552734</span> ,<br>         <span class="hljs-number">0.11328125</span>,  <span class="hljs-number">0.24133301</span>],<br>       [-<span class="hljs-number">0.30737305</span>,  <span class="hljs-number">0.0791626</span> , -<span class="hljs-number">1</span>.<span class="hljs-number">1875</span>    , ..., -<span class="hljs-number">1.6552734</span> ,<br>         <span class="hljs-number">0.11328125</span>,  <span class="hljs-number">0.24133301</span>],<br>       [-<span class="hljs-number">0.30737305</span>,  <span class="hljs-number">0.0791626</span> , -<span class="hljs-number">1</span>.<span class="hljs-number">1875</span>    , ..., -<span class="hljs-number">1.6552734</span> ,<br>         <span class="hljs-number">0.11328125</span>,  <span class="hljs-number">0.24133301</span>],<br>       ...,<br>       [-<span class="hljs-number">0.30737305</span>,  <span class="hljs-number">0.0791626</span> , -<span class="hljs-number">1</span>.<span class="hljs-number">1875</span>    , ..., -<span class="hljs-number">1.6552734</span> ,<br>         <span class="hljs-number">0.11328125</span>,  <span class="hljs-number">0.24133301</span>],<br>       [-<span class="hljs-number">0.30737305</span>,  <span class="hljs-number">0.0791626</span> , -<span class="hljs-number">1</span>.<span class="hljs-number">1875</span>    , ..., -<span class="hljs-number">1.6552734</span> ,<br>         <span class="hljs-number">0.11328125</span>,  <span class="hljs-number">0.24133301</span>],<br>       [-<span class="hljs-number">0.30737305</span>,  <span class="hljs-number">0.0791626</span> , -<span class="hljs-number">1</span>.<span class="hljs-number">1875</span>    , ..., -<span class="hljs-number">1.6552734</span> ,<br>         <span class="hljs-number">0.11328125</span>,  <span class="hljs-number">0.24133301</span>]], dtype=float32)]<br>infer avg:<span class="hljs-number">2</span>.<span class="hljs-number">000999927520752</span> ms<br>[INFO] unload model success, model Id is <span class="hljs-number">1</span><br>[INFO] end to destroy context<br>[INFO] end to reset device is <span class="hljs-number">0</span><br>[INFO] end to finalize acl<br></code></pre></td></tr></table></figure><h2 id="精度对比"><a href="#精度对比" class="headerlink" title="精度对比"></a>精度对比</h2><p>对比完成，后续再更新</p><h3 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/ascend/</span>ait.git<br></code></pre></td></tr></table></figure><h3 id="运行对比工具"><a href="#运行对比工具" class="headerlink" title="运行对比工具"></a>运行对比工具</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cd ait<span class="hljs-regexp">/ait/</span><br>chmod u+x install.sh<br>./install.sh<br>cd <span class="hljs-regexp">/home/m</span>a-user<span class="hljs-regexp">/work/</span><span class="hljs-number">202309</span><span class="hljs-regexp">/onnx2om/</span>ait<span class="hljs-regexp">/ait/</span>components<span class="hljs-regexp">/debug/</span>compare<br><span class="hljs-keyword">source</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Ascend/</span>ascend-toolkit/set_env.sh<br>python3 main.py -m <span class="hljs-regexp">/home/m</span>a-user<span class="hljs-regexp">/work/</span><span class="hljs-number">202309</span><span class="hljs-regexp">/onnx2om/</span>resnet50_official.onnx -om <span class="hljs-regexp">/home/m</span>a-user<span class="hljs-regexp">/work/</span><span class="hljs-number">202309</span><span class="hljs-regexp">/onnx2om/</span>resnet50_bs16.om \<br>-c <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Ascend/</span>ascend-toolkit<span class="hljs-regexp">/latest -o /</span>home<span class="hljs-regexp">/ma-user/</span>work<span class="hljs-regexp">/202309/</span>onnx2om<span class="hljs-regexp">/result/</span>test<br></code></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2>]]></content>
    
    
    <categories>
      
      <category>昇腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>modelarts</tag>
      
      <tag>onnx</tag>
      
      <tag>om</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>glm 单卡推理多用户同时响应</title>
    <link href="/2023/09/18/glm-%E5%8D%95%E5%8D%A1%E6%8E%A8%E7%90%86%E5%A4%9A%E7%94%A8%E6%88%B7%E5%90%8C%E6%97%B6%E5%93%8D%E5%BA%94/"/>
    <url>/2023/09/18/glm-%E5%8D%95%E5%8D%A1%E6%8E%A8%E7%90%86%E5%A4%9A%E7%94%A8%E6%88%B7%E5%90%8C%E6%97%B6%E5%93%8D%E5%BA%94/</url>
    
    <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、<strong>背景</strong></h1><p>前期对接客户过程中，反馈存在进行单卡多用户并发相应的需求，但当前官方模型均只支持串行响应无法对多个客户进行同时并发响应，因此需要对已有的 glm 代码进行开发，使其满足多用户并行响应的需求。</p><h1 id="二、操作步骤"><a href="#二、操作步骤" class="headerlink" title="二、操作步骤"></a>二、<strong>操作步骤</strong></h1><h2 id="2-1-准备工作"><a href="#2-1-准备工作" class="headerlink" title="2.1 准备工作"></a><strong>2.1 准备工作</strong></h2><ul><li>硬件：Ascend 910A</li><li>MindSpore：2.0.0rc1</li><li>CANN 版本：6.3.RC1.alpha003</li><li>驱动：23.0.rc1</li></ul><p>宁波 AICC 直接注册：swr.cn-east-xxx.nbaicc.com&#x2F;nbaicc_pub&#x2F;ms20rc1_py39_cann63:2023062601</p><p>使用的环境为 mindspore_py39，可使用如下命令进行环境切换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/ma-user/work<br><span class="hljs-built_in">mkdir</span> MindFormers<br><span class="hljs-built_in">cd</span> MindFormers<br>conda activate mindspore_py39<br></code></pre></td></tr></table></figure><p>在运行路径下，拉取最新的 mindformers 源码并安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone -b dev https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/mindspore/mi</span>ndformers.git<br>cd mindformersbash build.sh<br>cd ..<br></code></pre></td></tr></table></figure><h2 id="2-2-创建空间进行多用户数据存储"><a href="#2-2-创建空间进行多用户数据存储" class="headerlink" title="2.2 创建空间进行多用户数据存储"></a><strong>2.2 创建空间进行多用户数据存储</strong></h2><p>为了保证推理效率，在进行推理过程中均会打开增量推理开关，即将网络配置文件中的 use_past 变量设置为 True，在该条件下除了第一次需要输入完整语句外，后续每一次运行时均只需要输入最新的一个 token，其余内容均以保存在网络中。</p><p>为了满足多用户并发推理的需求，有两种解决方案可供选择，其一是关闭 use_past 开关，即每次推理输入全量的语句以及新生成的内容，这种情况下，各个用户之间的推理互不干涉但由于需要计算的 token 长度大，推理速度是受到明显限制的。另一种方案则是保持 use_past 开关为开启状态，在网络中对各个用户的前序状态进行保存，该方法能保证在增量推理过程中每次只输入一个 token 保证运算效率，是一种以空间换时间的思路。</p><p>对 mindformers&#x2F;models&#x2F;glm&#x2F;layers.py 文件中的 DeepNormWithGLULayer 类__init__函数中的 key_past 与 value_past 赋值函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">self.key_past = Parameter(Tensor(np.zeros(shape=self.kv_shape), self.params_dtype), name=<span class="hljs-string">&quot;key_past&quot;</span>)<br>self.value_past = Parameter(Tensor(np.zeros(shape=self.kv_shape), self.params_dtype), name=<span class="hljs-string">&quot;value_past&quot;</span>)<br></code></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">self.kv_past = nn.CellList()<br><span class="hljs-keyword">for</span> tmp <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(users):<br>    self.kv_past.append(userskv(self.kv_shape, self.params_dtype))<br></code></pre></td></tr></table></figure><p>并在 DeepNormWithGLULayer 类前定义新类用于存储多用户的 kv 值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">userskv</span>(nn.Cell):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, kv_shape, params_dtype</span>):<br>        <span class="hljs-built_in">super</span>(userskv, self).__init__()<br>        self.k_past = Parameter(Tensor(np.zeros(shape=kv_shape), params_dtype))<br>        self.value_past = Parameter(Tensor(np.zeros(shape=kv_shape), params_dtype))<br></code></pre></td></tr></table></figure><p>对 DeepNormWithGLULayer 类 layer_forward 函数中的 key_past 与 value_past 赋值函数进行修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">key_reset = self.assign(self.key_past, self.mul_4(self.key_past, F.cast(init_reset, self.params_dtype)))<br>value_reset = self.assign(self.value_past,<br>                                      self.mul_4(self.value_past, F.cast(init_reset, self.params_dtype)))<br>                                      <br>key_update = self.assign(self.key_past, key_present)<br>value_update = self.assign(self.value_past, value_present)<br></code></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">key_reset = self.assign(self.kv_past[user].k_past, self.mul_4(self.kv_past[user].k_past, F.cast(init_reset, self.params_dtype)))<br>value_reset = self.assign(self.kv_past[user].value_past,<br>                                      self.mul_4(self.kv_past[user].value_past, F.cast(init_reset, self.params_dtype)))<br>                                      <br>key_update = self.assign(self.kv_past[user].k_past, key_present)<br>value_update = self.assign(self.kv_past[user].value_past, value_present)<br></code></pre></td></tr></table></figure><h2 id="2-3-用户信息传递"><a href="#2-3-用户信息传递" class="headerlink" title="2.3 用户信息传递"></a><strong>2.3 用户信息传递</strong></h2><p>由于在网络中为多用户前序信息创建了存储空间，因此在网络运行过程中需要传递入对应的用户编号信息，保证能够获取对应用户的前序信息。</p><p>对 mindformers&#x2F;models&#x2F;glm&#x2F;layers.py 文件中的 DeepNormWithGLULayer 类 layer_forward 函数中的函数定义增加 user 变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">layer_forward</span>(<span class="hljs-params">self, hidden_states, mask, position_ids, init_reset=<span class="hljs-literal">True</span>, batch_valid_length=<span class="hljs-literal">None</span>, user=<span class="hljs-number">0</span></span>):<br></code></pre></td></tr></table></figure><p>对 mindformers&#x2F;models&#x2F;glm&#x2F;layers.py 文件中的 DeepNormWithGLULayer 类 construct 函数中的函数中增加 user 变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">construct</span>(<span class="hljs-params">self, hidden_states, mask, position_ids, init_reset=<span class="hljs-literal">True</span>, batch_valid_length=<span class="hljs-literal">None</span>, user=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            hidden_states: [batch, seq_len, hidden_size]</span><br><span class="hljs-string">            mask: [(1, 1), seq_len, seq_len]</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">return</span> self.layer_forward(hidden_states, mask, position_ids, init_reset, batch_valid_length, user)<br></code></pre></td></tr></table></figure><p>对 mindformers&#x2F;models&#x2F;glm&#x2F;glm.py 文件中的 GLMModel 类 construct 函数中的函数中增加 user 变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">construct</span>(<span class="hljs-params">self, input_ids, position_ids, attention_mask, init_reset=<span class="hljs-literal">True</span>, batch_valid_length=<span class="hljs-literal">None</span>, user=<span class="hljs-number">0</span></span>):<br><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.num_layers):<br>            layer_ret = self.layers[i](hidden_states, attention_mask, position_ids, init_reset, batch_valid_length, user)<br></code></pre></td></tr></table></figure><p>对 mindformers&#x2F;models&#x2F;glm&#x2F;glm.py 文件中的 GLMForPreTraining 类_incremental_infer 函数中的函数中增加 user 变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_incremental_infer</span>(<span class="hljs-params">self, input_ids, current_index, valid_length_each_example, position_ids=<span class="hljs-literal">None</span>, attention_mask=<span class="hljs-literal">None</span>, user=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-keyword">if</span> self.is_first_iteration:<br>            self.add_flags_recursive(is_first_iteration=<span class="hljs-literal">True</span>)<br>            res = self(<br>                input_ids=Tensor(input_ids, mstype.int32),<br>                <span class="hljs-comment"># input_ids (1,512) int32</span><br>                position_ids=Tensor(position_ids, mstype.int32),<br>                <span class="hljs-comment"># position_ids (1, 2, 512) int32</span><br>                attention_mask=Tensor(attention_mask, mstype.float32),<br>                <span class="hljs-comment"># attention_mask (1, 1, 512, 512) float32</span><br>                input_position=current_index,<br>                init_reset=Tensor([<span class="hljs-literal">False</span>], mstype.bool_),  <span class="hljs-comment"># init_reset (1,) bool False</span><br>                batch_valid_length=Tensor([valid_length_each_example], mstype.int32),<br>                user=user<br>            )  <span class="hljs-comment"># batch_valid_length (1,) int32 4</span><br>            <span class="hljs-comment"># first iter done, go to other iters</span><br>            self.is_first_iteration = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            self.add_flags_recursive(is_first_iteration=<span class="hljs-literal">False</span>)<br>            current_index_tmp = <span class="hljs-built_in">int</span>(current_index[<span class="hljs-number">0</span>])<br>            <span class="hljs-comment"># use numpy to slice array to avoid complie ascend slice op</span><br>            inputs_tmp = input_ids[:, current_index_tmp:current_index_tmp + <span class="hljs-number">1</span>]<br>            position_ids_tmp = position_ids[..., current_index_tmp:current_index_tmp + <span class="hljs-number">1</span>]<br>            attention_mask_tmp = attention_mask[:, :, current_index_tmp:current_index_tmp + <span class="hljs-number">1</span>, :]<br>            res = self(<br>                input_ids=Tensor(inputs_tmp, mstype.int32),<br>                <span class="hljs-comment"># input_ids (1,512) int32</span><br>                position_ids=Tensor(position_ids_tmp, mstype.int32),<br>                <span class="hljs-comment"># position_ids (1, 2, 1) int32</span><br>                attention_mask=Tensor(attention_mask_tmp, mstype.float32),<br>                <span class="hljs-comment"># attention_mask (1, 1, 1, 512) float32</span><br>                input_position=current_index,<br>                init_reset=Tensor([<span class="hljs-literal">True</span>], mstype.bool_),  <span class="hljs-comment"># init_reset (1,) bool True</span><br>                batch_valid_length=Tensor([valid_length_each_example], mstype.int32),<br>                user=user<br>            )  <span class="hljs-comment"># batch_valid_length (1,) int32 5</span><br></code></pre></td></tr></table></figure><p>对 mindformers&#x2F;models&#x2F;glm&#x2F;glm.py 文件中的 GLMForPreTraining 类_stream_chat 函数中的函数中增加 user 变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_stream_chat</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                 origin_inputs,</span><br><span class="hljs-params">                 top_k,</span><br><span class="hljs-params">                 top_p,</span><br><span class="hljs-params">                 repetition_penalty,</span><br><span class="hljs-params">                 max_length,</span><br><span class="hljs-params">                 eos_token_id,</span><br><span class="hljs-params">                 streamer=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                 pad_token_id=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                 tokenizer=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                    tlock=<span class="hljs-literal">None</span>, qi=<span class="hljs-number">0</span></span>):<br>                    <br>        res = self._incremental_infer(<br>                        input_ids=input_ids,<br>                        position_ids=position_ids,<br>                        attention_mask=attention_mask,<br>                        current_index=current_index,<br>                        valid_length_each_example=valid_length_each_example,<br>                        user=qi<br>                    )<br></code></pre></td></tr></table></figure><h2 id="2-4-多用户请求测试"><a href="#2-4-多用户请求测试" class="headerlink" title="2.4 多用户请求测试"></a><strong>2.4 多用户请求测试</strong></h2><p>完成代码修改后可通过如下代码进行多用户同时请求的响应测试，同时可相应的用户数量可通过 users 数量配置进行设置，问题最大回答长度可通过配置 seq_length 参数进行配置。</p><p>运行代码后会首先对每一个用户对应的计算图进行构造，用户数越多，需要初始化加载的时间越多。</p><p>由于当前采用了内存空间换时间的推理策略，能够同时响应的用户数和最大响应长度存在关联关系，初步测试数：长度为 1024 时最大是 17 个用户，平均响应速度在 0.9tokens&#x2F;s 左右，综合是 15.3tokens&#x2F;s；长度为 2048 时能够跑通 10 个用户，响应速度是 1.36tokens&#x2F;s，综合是 13.6tokens&#x2F;s。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> mindspore <span class="hljs-keyword">as</span> ms<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">from</span> mindformers.models.glm <span class="hljs-keyword">import</span> GLMConfig, GLMChatModel, GLMChatModelWithLora<br><span class="hljs-keyword">from</span> mindformers.models.glm.chatglm_6b_tokenizer <span class="hljs-keyword">import</span> ChatGLMTokenizer<br><span class="hljs-keyword">from</span> mindformers.models.glm.glm_processor <span class="hljs-keyword">import</span> process_response<br><span class="hljs-keyword">from</span> mindspore <span class="hljs-keyword">import</span> Profiler<br><br>users = <span class="hljs-number">10</span><br><br>config = GLMConfig(<br>    position_encoding_2d=<span class="hljs-literal">True</span>,<br>    use_past=<span class="hljs-literal">True</span>,<br>    is_npu_acceleration=<span class="hljs-literal">True</span>,<br>    users=users,<br>    seq_length=<span class="hljs-number">2048</span><br>)<br>ms.set_context(mode=ms.GRAPH_MODE, device_target=<span class="hljs-string">&quot;Ascend&quot;</span>, device_id=<span class="hljs-number">6</span>)<br><span class="hljs-comment"># profiler = Profiler()</span><br><span class="hljs-comment"># chat_glm(1)</span><br><span class="hljs-comment"># profiler.analyse()</span><br>model = GLMChatModel(config)<br><span class="hljs-keyword">import</span> threading<br><br>tlock = threading.Lock()<br><br>ms.load_checkpoint(<span class="hljs-string">&quot;/home/ma-user/work/mindformers/checkpoint_download/glm/glm_6b.ckpt&quot;</span>, model)<br>tokenizer = ChatGLMTokenizer(<span class="hljs-string">&#x27;/home/ma-user/work/mindformers/checkpoint_download/glm/ice_text.model&#x27;</span>)<br><br>q = &#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(users):<br>    q[i] = <span class="hljs-string">&quot;你是谁&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">chat_glm</span>(<span class="hljs-params">qi</span>):<br>    <span class="hljs-comment"># q = &#123;0:&quot;今天天气不错&quot;,1:&quot;请介绍一下华为&quot;,2:&quot;你好&quot;,3:&quot;怎么提升网球技术&quot;,4:&quot;你是谁&quot;,5:&quot;你能做什么&quot;,6:&quot;笑一个？&quot;,7:&quot;坐飞机需要注意什么&quot;&#125;</span><br>    <br>    inputs = tokenizer(q[qi])<br>    start_time = time.time()<br>    count = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> model._stream_chat(<br>        origin_inputs=np.expand_dims(np.array(inputs[<span class="hljs-string">&#x27;input_ids&#x27;</span>]).astype(np.int32), <span class="hljs-number">0</span>),<br>        top_k=<span class="hljs-number">1</span>,<br>        top_p=<span class="hljs-number">1</span>,<br>        repetition_penalty=<span class="hljs-number">1</span>,<br>        max_length=<span class="hljs-number">51</span>,<br>        eos_token_id=config.eos_token_id,<br>        pad_token_id=config.pad_token_id,<br>        tokenizer=tokenizer, tlock=tlock, qi=qi):<br>        <span class="hljs-built_in">print</span>(qi,time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time())), i)<br>        count+=<span class="hljs-number">1</span><br>    end_time = time.time()<br>    <span class="hljs-comment"># print(model.transformer.layers[9].key_past.numpy())</span><br>    <span class="hljs-comment"># outputs[0] = outputs[0][len(inputs[&#x27;input_ids&#x27;]) + 1:]</span><br>    <span class="hljs-comment"># print(origin_inputs)</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;generate speed: <span class="hljs-subst">&#123;count/(end_time-start_time):<span class="hljs-number">.2</span>f&#125;</span> tokens/s&#x27;</span>)<br>    <span class="hljs-comment">#profiler.analyse()</span><br><br><span class="hljs-comment">#chat_glm(0)</span><br><span class="hljs-comment"># profiler.analyse()</span><br>    <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(users):<br>    th = threading.Thread(target=chat_glm, args=(i,))<br>    th.start()<br></code></pre></td></tr></table></figure><h1 id="三、问题及解决"><a href="#三、问题及解决" class="headerlink" title="三、问题及解决"></a>三、<strong>问题及解决</strong></h1><h2 id="3-1、用户前序数据丢失问题"><a href="#3-1、用户前序数据丢失问题" class="headerlink" title="3.1、用户前序数据丢失问题"></a>3.1、用户前序数据丢失问题</h2><p>最初采用该思路进行推理时，将各个用户的前序数据存储于推理图外的 mindformers&#x2F;models&#x2F;glm&#x2F;glm.py 文件中的 GLMForPreTraining 类_stream_chat 函数中，通过设置变量并通过等号进行赋值，但运行过程中发现出现如下图所示的用户历史记录信息混乱的问题。</p><p><img src="https://cleansely.top:48083/i/2023/09/18/6507c8f8047f1.png"></p><p>后经定位发现仅采用等号进行赋值会出现仅记录了变量地址，跳出函数后相关变量被释放导致读不到历史数据的问题。因此后续尝试采用在 GLMForPreTraining 类中通过 Parameter 申请前序数据的存储内存空间，并通过 assign 操作对前序参数进行记录。</p><h2 id="3-2、响应速度慢，多用户数据存储加载成为效率瓶颈"><a href="#3-2、响应速度慢，多用户数据存储加载成为效率瓶颈" class="headerlink" title="3.2、响应速度慢，多用户数据存储加载成为效率瓶颈"></a>3.2、响应速度慢，多用户数据存储加载成为效率瓶颈</h2><p>在解决问题一后，已经能够进行多用户的并发推理操作，但发现整体推理效率低，综合推理速度仅为 1-2token&#x2F;s，定位后发现内存空间所在的函数不在计算图内，导致 assign 操作占用了绝大部分的推理时间，后续调整后将前序数据的存储过程放置到了能够生成计算图的 DeepNormWithGLULayer 类中，进而解决了效率问题。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a><strong>四、总结</strong></h1><p>基于本文的开发，可以实现单卡推理场景下的多用户并发响应。</p><p>但为了满足多用户的并发响应，需要针对每个用户进行不同计算图的构建，导致用户数多时需要花费较长的时间进行初始化才能够进行需求响应，同时并发数也需要根据需求进行初始配置，如果需要进行用户数调整则需要进行重新启动。</p><h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、<strong>参考资料</strong></h1><p><a href="https://gitee.com/mindspore/mindformers/tree/dev">https://gitee.com/mindspore/mindformers/tree/dev</a></p>]]></content>
    
    
    <categories>
      
      <category>昇腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>modelarts</tag>
      
      <tag>mindformers</tag>
      
      <tag>chatglm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组内存连续性问题contiguous</title>
    <link href="/2023/09/12/%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E8%BF%9E%E7%BB%AD%E6%80%A7%E9%97%AE%E9%A2%98contiguous/"/>
    <url>/2023/09/12/%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E8%BF%9E%E7%BB%AD%E6%80%A7%E9%97%AE%E9%A2%98contiguous/</url>
    
    <content type="html"><![CDATA[<h1 id="数组内存连续性问题contiguous"><a href="#数组内存连续性问题contiguous" class="headerlink" title="数组内存连续性问题contiguous"></a>数组内存连续性问题contiguous</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>对于一张图片使用numpy读取，进行了一定处理后作为输入1输入到onnx或者om进行推理，得到结果1，对于输入1保存为npy再读取作为输入2，输入到onnx或om进行推理，得到结果2，结果1和结果2并不相等。</p><p><img src="https://cleansely.top:48083/i/2023/09/12/65007b9c241ff.png" alt="mmexport1694530147808"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>变量可以通过重新开辟空间，将数据连续拷贝进去的方法将不连续的数据变成某种连续方式。numpy 变量中连续性可以用自带的函数修正，不连续的变量通过函数 <code>np.ascontiguousarray(arr)</code>变为C连续，<code>np.asfortranarray(arr)</code>变为Fortran连续</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    arr = np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(arr.data.c_contiguous)  <span class="hljs-comment"># True arr C连续</span><br><br>    tran_arr = arr.transpose(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(tran_arr.data.contiguous)  <span class="hljs-comment"># False tran_arr不连续</span><br><br>    c_arr = np.ascontiguousarray(tran_arr)  <span class="hljs-comment"># 变为 C 连续</span><br>    <span class="hljs-built_in">print</span>(c_arr.flags)<br><br>    f_arr = np.asfortranarray(tran_arr)  <span class="hljs-comment"># 变为 Fortran 连续</span><br>    <span class="hljs-built_in">print</span>(f_arr.flags)<br><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">False</span><br><span class="hljs-string">False</span><br><span class="hljs-string">True</span><br><span class="hljs-string">  C_CONTIGUOUS : True</span><br><span class="hljs-string">  F_CONTIGUOUS : False</span><br><span class="hljs-string">  OWNDATA : False</span><br><span class="hljs-string">  WRITEABLE : True</span><br><span class="hljs-string">  ALIGNED : True</span><br><span class="hljs-string">  WRITEBACKIFCOPY : False</span><br><span class="hljs-string">  UPDATEIFCOPY : False</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.zywvvd.com/notes/study/deep-learning/numpy-tensor-contiguous/numpy-tensor-contiguous/">https://www.zywvvd.com/notes/study/deep-learning/numpy-tensor-contiguous/numpy-tensor-contiguous/</a></p>]]></content>
    
    
    <categories>
      
      <category>昇腾</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ms-chatglm6b 单卡多用户流式推理临时方案</title>
    <link href="/2023/08/17/ms-chatglm6b-%E5%8D%95%E5%8D%A1%E5%A4%9A%E7%94%A8%E6%88%B7%E6%B5%81%E5%BC%8F%E6%8E%A8%E7%90%86%E4%B8%B4%E6%97%B6%E6%96%B9%E6%A1%88/"/>
    <url>/2023/08/17/ms-chatglm6b-%E5%8D%95%E5%8D%A1%E5%A4%9A%E7%94%A8%E6%88%B7%E6%B5%81%E5%BC%8F%E6%8E%A8%E7%90%86%E4%B8%B4%E6%97%B6%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="ms-chatglm6b-单卡多用户流式推理临时方案"><a href="#ms-chatglm6b-单卡多用户流式推理临时方案" class="headerlink" title="ms-chatglm6b 单卡多用户流式推理临时方案"></a>ms-chatglm6b 单卡多用户流式推理临时方案</h1><h2 id="1-拉取最新代码并安装"><a href="#1-拉取最新代码并安装" class="headerlink" title="1. 拉取最新代码并安装"></a>1. 拉取最新代码并安装</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/mindspore/mi</span>ndformers.git mindformers0816<br>cd mindformers0816<br>bash build.sh<br></code></pre></td></tr></table></figure><h2 id="2-修改源码"><a href="#2-修改源码" class="headerlink" title="2. 修改源码"></a>2. 修改源码</h2><p>可以修改当前路径代码，也可以修改环境安装代码<code>/home/ma-user/anaconda3/envs/mindspore_py39/lib/python3.9/site-packages/mindformers</code></p><h3 id="2-1-替换glm-py"><a href="#2-1-替换glm-py" class="headerlink" title="2.1 替换glm.py"></a>2.1 替换glm.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Copyright 2023 Huawei Technologies Co., Ltd</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"># you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"># You may obtain a copy of the License at</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"># See the License for the specific language governing permissions and</span><br><span class="hljs-comment"># limitations under the License.</span><br><span class="hljs-comment"># ============================================================================</span><br><span class="hljs-string">&quot;&quot;&quot;GLM model.&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">import</span> mindspore <span class="hljs-keyword">as</span> ms<br><span class="hljs-keyword">from</span> mindspore <span class="hljs-keyword">import</span> dtype <span class="hljs-keyword">as</span> mstype<br><span class="hljs-keyword">from</span> mindspore <span class="hljs-keyword">import</span> nn, ops, Tensor<br><span class="hljs-keyword">from</span> mindspore.ops <span class="hljs-keyword">import</span> functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">from</span> mindspore.ops <span class="hljs-keyword">import</span> operations <span class="hljs-keyword">as</span> P<br><span class="hljs-keyword">from</span> mindspore.common.initializer <span class="hljs-keyword">import</span> initializer<br><span class="hljs-keyword">from</span> mindspore.common.parameter <span class="hljs-keyword">import</span> Parameter<br><br><span class="hljs-keyword">from</span> mindformers.mindformer_book <span class="hljs-keyword">import</span> MindFormerBook<br><span class="hljs-keyword">from</span> mindformers.modules.transformer <span class="hljs-keyword">import</span> VocabEmbedding, EmbeddingOpParallelConfig, OpParallelConfig<br><span class="hljs-keyword">from</span> mindformers.tools.register <span class="hljs-keyword">import</span> MindFormerRegister, MindFormerModuleType<br><span class="hljs-keyword">from</span> mindformers.core.loss <span class="hljs-keyword">import</span> CrossEntropyLoss<br><span class="hljs-keyword">from</span> mindformers.modules.layers <span class="hljs-keyword">import</span> LayerNorm<br><span class="hljs-keyword">from</span> mindformers.tools.utils <span class="hljs-keyword">import</span> is_version_ge<br><span class="hljs-keyword">from</span> mindformers.pet.tuners.pet_adapter <span class="hljs-keyword">import</span> PetAdapter<br><span class="hljs-keyword">from</span> mindformers.pet.tuners.lora_adapter <span class="hljs-keyword">import</span> LoraAdapter<br><br><span class="hljs-keyword">from</span> .glm_config <span class="hljs-keyword">import</span> GLMConfig<br><span class="hljs-keyword">from</span> .layers <span class="hljs-keyword">import</span> DeepNormWithGLULayer<br><span class="hljs-keyword">from</span> ..base_model <span class="hljs-keyword">import</span> BaseModel<br><br><span class="hljs-comment">#  Get MS backend: 0 vm 1 GE</span><br>is_ge = os.getenv(<span class="hljs-string">&#x27;MS_ENABLE_GE&#x27;</span>)<br><span class="hljs-keyword">if</span> is_ge == <span class="hljs-string">&#x27;1&#x27;</span>:<br>    jit_level = <span class="hljs-string">&quot;O3&quot;</span><br><span class="hljs-keyword">else</span>:<br>    jit_level = <span class="hljs-string">&quot;O1&quot;</span><br><br>default_dpmp_config = OpParallelConfig()<br>default_embedding_parallel_config = EmbeddingOpParallelConfig()<br><br>__all__ = [<span class="hljs-string">&#x27;GLMForPreTraining&#x27;</span>, <span class="hljs-string">&#x27;GLMChatModel&#x27;</span>, <span class="hljs-string">&#x27;GLMForPreTrainingWithLora&#x27;</span>, <span class="hljs-string">&#x27;GLMChatModelWithLora&#x27;</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">topk_fun</span>(<span class="hljs-params">logits, topk=<span class="hljs-number">5</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Get topk&quot;&quot;&quot;</span><br>    batch_value = []<br>    batch_index = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(logits.shape[<span class="hljs-number">0</span>]):<br>        target_column = logits[i].tolist()<br>        sorted_array = [(k, v) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(target_column)]<br>        sorted_array.sort(key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>)<br>        topk_array = sorted_array[:topk]<br>        index, value = <span class="hljs-built_in">zip</span>(*topk_array)<br>        batch_value.append(value)<br>        batch_index.append(index)<br>    <span class="hljs-keyword">return</span> np.array(batch_value), np.array(batch_index)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">batch_select</span>(<span class="hljs-params">data, index</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;bathc operation to sorted_logits[:, :top_p_num]&quot;&quot;&quot;</span><br>    output = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(data.shape[<span class="hljs-number">0</span>]):<br>        res = data[i, :index[i]]<br>        output.append(res.reshape(<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">return</span> np.concatenate(output, <span class="hljs-number">0</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sampler</span>(<span class="hljs-params">log_probs_revised, top_p, top_k, use_pynative=<span class="hljs-literal">False</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Convert the log_probs to probability&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> use_pynative:<br>        logits = P.Pow()(np.e, Tensor(log_probs_revised, mstype.float32))<br>    <span class="hljs-keyword">else</span>:<br>        logits = np.power(np.e, np.array(log_probs_revised, np.float32))<br><br>    <span class="hljs-comment"># If top_p is less than 1.0, use top_p sampling</span><br>    <span class="hljs-keyword">if</span> top_p &lt; <span class="hljs-number">1.0</span>:<br>        <span class="hljs-comment"># Only consider the 5000 largest logits to reduce computation</span><br>        <span class="hljs-keyword">if</span> use_pynative:<br>            sorted_logits, index = P.TopK(<span class="hljs-built_in">sorted</span>=<span class="hljs-literal">True</span>)(logits, <span class="hljs-number">5000</span>)<br>            cumsum_logits = P.CumSum()(sorted_logits, <span class="hljs-number">1</span>)<br>            cumsum_logits = cumsum_logits.asnumpy()<br>            index = index.asnumpy()<br>            sorted_logits = sorted_logits.asnumpy()<br>        <span class="hljs-keyword">else</span>:<br>            sorted_logits, index = topk_fun(logits, <span class="hljs-number">5000</span>)<br>            cumsum_logits = np.cumsum(sorted_logits, <span class="hljs-number">1</span>)<br>        cumsum_logits = cumsum_logits<br>        index = index<br>        sorted_logits = sorted_logits<br>        top_p_num = np.<span class="hljs-built_in">sum</span>(cumsum_logits &lt; top_p, axis=-<span class="hljs-number">1</span>) + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># Get the corresponding probs and indices</span><br>        probs = batch_select(sorted_logits, top_p_num)<br>        p_args = batch_select(index, top_p_num)<br>        p = probs / np.<span class="hljs-built_in">sum</span>(probs, -<span class="hljs-number">1</span>, keepdims=<span class="hljs-literal">True</span>)<br>        <span class="hljs-comment"># if top_p is set to 1.0, use top_k sampling</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># Get the corresponding probs and indices</span><br>        <span class="hljs-keyword">if</span> use_pynative:<br>            probs, p_args = P.TopK(<span class="hljs-built_in">sorted</span>=<span class="hljs-literal">True</span>)(logits, top_k)<br>            probs = probs.asnumpy()<br>            p_args = p_args.asnumpy()<br>        <span class="hljs-keyword">else</span>:<br>            probs, p_args = topk_fun(logits, top_k)<br>        probs = probs<br>        p_args = p_args<br>        <span class="hljs-comment"># Avoid rounding error</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(probs.shape[<span class="hljs-number">0</span>]):<br>            <span class="hljs-keyword">if</span> np.<span class="hljs-built_in">sum</span>(probs[i]) == <span class="hljs-number">0</span>:<br>                probs[i] = np.array([<span class="hljs-number">1</span> / top_k <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(top_k)])<br>        p = probs / np.<span class="hljs-built_in">sum</span>(probs, -<span class="hljs-number">1</span>, keepdims=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> p, p_args<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">precision_correct</span>(<span class="hljs-params">p, top_p, top_k, batch_size</span>):<br>    <span class="hljs-comment"># Avoid rounding error</span><br>    <span class="hljs-keyword">if</span> top_p == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(batch_size):<br>            <span class="hljs-keyword">if</span> np.<span class="hljs-built_in">sum</span>(p[i]) == <span class="hljs-number">0</span>:<br>                p[i] = np.array([<span class="hljs-number">1</span> / top_k <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(top_k)])<br>        p = p / np.<span class="hljs-built_in">sum</span>(p, -<span class="hljs-number">1</span>, keepdims=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> p<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProcessLogits</span>(nn.Cell):<br>    <span class="hljs-string">r&quot;&quot;&quot;Process logits into probability distribution.&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, use_past=<span class="hljs-literal">False</span></span>):<br>        <span class="hljs-built_in">super</span>(ProcessLogits, self).__init__()<br>        self.e = ms.Tensor(np.e)<br>        self.gather = P.Gather()<br>        self.logsoftmax = P.LogSoftmax()<br>        self.reshape = P.Reshape()<br>        self.use_past = use_past<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">construct</span>(<span class="hljs-params">self, logits, current_index=<span class="hljs-literal">None</span>, is_first_iteration=<span class="hljs-literal">False</span></span>):<br>        logits = logits.reshape(-<span class="hljs-number">1</span>, logits.shape[-<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">if</span> self.use_past <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> is_first_iteration:<br>            logits = logits<br>        <span class="hljs-keyword">elif</span> current_index <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            index = current_index.view(-<span class="hljs-number">1</span>,)<br>            logits = self.gather(logits, index, <span class="hljs-number">0</span>)<br>        outputs = self.logsoftmax(logits)<br>        outputs = F.tensor_pow(self.e, outputs)<br>        <span class="hljs-keyword">return</span> outputs<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GLMModel</span>(nn.Cell):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    The backbone of GLM network</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        config (GLMConfig): The config of network.</span><br><span class="hljs-string">        op_parallel_config (optional): Operator parallel strategy. Default: `OpParallelConfig()`.</span><br><span class="hljs-string">        embed_parallel_config (optional): Operator parallel strategy. Default: `EmbeddingOpParallelConfig()`.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                 config,</span><br><span class="hljs-params">                 op_parallel_config=default_dpmp_config,</span><br><span class="hljs-params">                 embed_parallel_config=default_embedding_parallel_config</span>):<br>        <span class="hljs-built_in">super</span>(GLMModel, self).__init__()<br>        <span class="hljs-comment"># recording parameters</span><br>        self.num_layers = config.num_layers<br>        self.hidden_size = config.hidden_size<br>        self.num_heads = config.num_heads<br>        self.seq_length = config.seq_length<br>        self.use_past = config.use_past<br>        layernorm = LayerNorm<br>        <span class="hljs-keyword">if</span> config.parallel_config:<br>            op_parallel_config = config.parallel_config<br><br>        <span class="hljs-comment"># create embedding parameters</span><br>        <span class="hljs-keyword">if</span> is_version_ge(ms.__version__, <span class="hljs-string">&#x27;1.11.0&#x27;</span>):<br>            self.embedding_dropout = nn.Dropout(p=config.embedding_dropout_prob)<br>        <span class="hljs-keyword">else</span>:<br>            self.embedding_dropout = nn.Dropout(keep_prob=<span class="hljs-number">1</span> - config.embedding_dropout_prob)<br><br>        embed_parallel_config.data_parallel = op_parallel_config.data_parallel<br>        embed_parallel_config.model_parallel = op_parallel_config.model_parallel<br>        embed_parallel_config.vocab_emb_dp = <span class="hljs-literal">False</span><br>        self.word_embeddings = VocabEmbedding(vocab_size=config.vocab_size, embedding_size=config.hidden_size,<br>                                              parallel_config=embed_parallel_config)<br><br>        self.matmul = ops.MatMul().shard(((<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">1</span>, embed_parallel_config.model_parallel)))<br>        self.transpose = ops.Transpose().shard(((embed_parallel_config.model_parallel, <span class="hljs-number">1</span>),))<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_layer</span>(<span class="hljs-params">layer_id</span>):<br>            <span class="hljs-keyword">return</span> DeepNormWithGLULayer(<br>                self.num_layers,<br>                self.hidden_size,<br>                self.num_heads,<br>                config.batch_size,<br>                config.attention_dropout_rate,<br>                config.hidden_dropout_rate,<br>                config.layernorm_epsilon,<br>                layer_id,<br>                max_seq_len=self.seq_length,<br>                inner_hidden_size=config.inner_hidden_size,<br>                hidden_size_per_attention_head=config.hidden_size_per_attention_head,<br>                layernorm_order=config.layernorm_order,<br>                layernorm=layernorm,<br>                use_bias=<span class="hljs-literal">True</span>,<br>                activation_func=config.activation_func,<br>                position_encoding_2d=config.position_encoding_2d,<br>                params_dtype=config.param_init_type,<br>                layernorm_dtype=config.layernorm_compute_type,<br>                softmax_dtype=config.softmax_compute_type,<br>                compute_dtype=config.compute_dtype,<br>                use_past=self.use_past,<br>                parallel_config=op_parallel_config,<br>                users=config.users,<br>            )<br><br>        self.layers = nn.CellList(<br>            [get_layer(layer_id) <span class="hljs-keyword">for</span> layer_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(config.num_layers)])<br><br>        <span class="hljs-comment"># Final layer norm before output.</span><br>        self.use_final_layernorm = config.use_final_layernorm<br>        <span class="hljs-keyword">if</span> config.use_final_layernorm:<br>            self.final_layernorm = layernorm(config.hidden_size, eps=config.layernorm_epsilon)<br>            self.final_layernorm.shard(((op_parallel_config.data_parallel, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>),))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">construct</span>(<span class="hljs-params">self, input_ids, position_ids, attention_mask, init_reset=<span class="hljs-literal">True</span>, batch_valid_length=<span class="hljs-literal">None</span>, user=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Get output logits</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Inputs:</span><br><span class="hljs-string">            input_ids (Tensor): The tokenized inputs with dtype int32.</span><br><span class="hljs-string">            input_mask (Tensor): The mask indicating whether each position is a valid input.</span><br><span class="hljs-string">            position_ids (Tensor): Used to identify each token&#x27;s position in the list of tokens.</span><br><span class="hljs-string">            attention_mask (Tensor): Used when batching sequences together.</span><br><span class="hljs-string">            init_reset (bool, optional): Default: True.</span><br><span class="hljs-string">            batch_valid_length (Tensor, optional): Default: None.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            logits (Tensor): The output logit of backbone.</span><br><span class="hljs-string">            table (Tensor): The embedding table for the vocabulary.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> attention_mask <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            attention_mask = ops.ones((<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), mstype.int32)<br><br>        hidden_states, table = self.word_embeddings(input_ids)<br><br>        hidden_states = self.embedding_dropout(hidden_states)<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.num_layers):<br>            layer_ret = self.layers[i](hidden_states, attention_mask, position_ids, init_reset, batch_valid_length, user)<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(layer_ret, <span class="hljs-built_in">tuple</span>):<br>                layer_ret = layer_ret[<span class="hljs-number">0</span>]<br>            hidden_states = layer_ret<br><br>        <span class="hljs-comment"># Final layer norm.</span><br>        <span class="hljs-keyword">if</span> self.use_final_layernorm:<br>            logits = self.final_layernorm(hidden_states)<br>        <span class="hljs-keyword">else</span>:<br>            logits = hidden_states<br><br>        <span class="hljs-keyword">return</span> logits, table<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GLMHead</span>(nn.Cell):<br>    <span class="hljs-string">r&quot;&quot;&quot;Head for GLM to get the logits of each token in the vocab.&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                 hidden_size,</span><br><span class="hljs-params">                 vocab_size,</span><br><span class="hljs-params">                 param_init_type=mstype.float32,</span><br><span class="hljs-params">                 compute_dtype=mstype.float16,</span><br><span class="hljs-params">                 embed_parallel_config=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(GLMHead, self).__init__()<br>        self.param_init_type = param_init_type<br>        self.compute_dtype = compute_dtype<br>        self.weight = Parameter(initializer(<span class="hljs-string">&quot;normal&quot;</span>, [vocab_size, hidden_size], compute_dtype), name=<span class="hljs-string">&quot;weight&quot;</span>)<br>        self.transpose = ops.Transpose().shard(((embed_parallel_config.model_parallel, <span class="hljs-number">1</span>),))<br>        self.matmul = ops.MatMul(transpose_b=<span class="hljs-literal">True</span>).shard(<br>            ((embed_parallel_config.data_parallel, <span class="hljs-number">1</span>), (embed_parallel_config.model_parallel, <span class="hljs-number">1</span>)))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">construct</span>(<span class="hljs-params">self, state, embedding_table=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Get vocab probs&quot;&quot;&quot;</span><br>        state = F.reshape(state, (-<span class="hljs-number">1</span>, F.shape(state)[-<span class="hljs-number">1</span>]))<br>        state = ops.cast(state, self.compute_dtype)<br>        <span class="hljs-keyword">if</span> embedding_table <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            embedding_table = self.weight<br>        embedding_table = self.cast(embedding_table, self.compute_dtype)<br>        logits_parallel = self.matmul(state, embedding_table)<br>        <span class="hljs-keyword">return</span> logits_parallel<br><br><br><span class="hljs-meta">@MindFormerRegister.register(<span class="hljs-params">MindFormerModuleType.MODELS</span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GLMForPreTraining</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    <span class="hljs-string">r&quot;&quot;&quot;</span><br><span class="hljs-string">    Provide glm training loss or logits through network.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        config (GLMConfig): The config of GLMModel.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    _support_list = MindFormerBook.get_model_support_list()[<span class="hljs-string">&#x27;glm&#x27;</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, config: GLMConfig</span>):<br>        <span class="hljs-built_in">super</span>(GLMForPreTraining, self).__init__(config)<br>        self.config = config<br>        self.position_encoding_2d = config.position_encoding_2d<br>        self.transformer = GLMModel(config)<br>        self.lm_head = GLMHead(<br>            hidden_size=config.hidden_size,<br>            vocab_size=config.vocab_size,<br>            param_init_type=config.param_init_type,<br>            compute_dtype=config.compute_dtype,<br>            embed_parallel_config=config.parallel_config)<br>        self.stridedslice = ops.StridedSlice().shard(((<span class="hljs-number">1</span>, <span class="hljs-number">1</span>),))<br>        self.loss = CrossEntropyLoss(parallel_config=config.parallel_config)<br>        self.gmask = config.gmask_token_id<br>        self.bos_token_id = config.bos_token_id<br>        self.ones = P.Ones()<br>        self.load_checkpoint(config)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_masks_np</span>(<span class="hljs-params">self, input_ids</span>):<br>        batch_size, seq_length = input_ids.shape<br>        context_lengths = [<span class="hljs-built_in">list</span>(seq).index(self.config.bos_token_id) <span class="hljs-keyword">for</span> seq <span class="hljs-keyword">in</span> input_ids]<br>        attention_mask = np.tril(np.ones((batch_size, seq_length, seq_length)))<br>        <span class="hljs-keyword">for</span> i, context_length <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(context_lengths):<br>            attention_mask[i, :, :context_length] = <span class="hljs-number">1</span><br>        attention_mask = np.expand_dims(attention_mask, axis=<span class="hljs-number">1</span>)<br>        attention_mask = np.array(attention_mask &lt; <span class="hljs-number">0.5</span>, np.bool_)<br>        <span class="hljs-keyword">return</span> attention_mask<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_position_ids_np</span>(<span class="hljs-params">self, input_ids, mask_positions, use_gmasks=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Get position ids from input_ids and mask_positions with numpy&quot;&quot;&quot;</span><br>        batch_size, seq_length = input_ids.shape<br>        <span class="hljs-keyword">if</span> use_gmasks <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            use_gmasks = [<span class="hljs-literal">False</span>] * batch_size<br>        context_lengths = [<span class="hljs-built_in">list</span>(seq).index(self.config.bos_token_id) <span class="hljs-keyword">for</span> seq <span class="hljs-keyword">in</span> input_ids]<br>        <span class="hljs-keyword">if</span> self.config.position_encoding_2d:<br>            position_ids = np.repeat(np.expand_dims(np.arange(seq_length), <span class="hljs-number">0</span>), batch_size, axis=<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">for</span> i, context_length <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(context_lengths):<br>                position_ids[i, context_length:] = mask_positions[i]<br>            block_position_ids = [np.concatenate((<br>                np.zeros(context_length, np.int32),<br>                np.arange(seq_length - context_length, dtype=np.int32) + <span class="hljs-number">1</span><br>            )) <span class="hljs-keyword">for</span> context_length <span class="hljs-keyword">in</span> context_lengths]<br>            block_position_ids = np.stack(block_position_ids, axis=<span class="hljs-number">0</span>)<br>            position_ids = np.stack((position_ids, block_position_ids), axis=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">else</span>:<br>            position_ids = np.repeat(np.expand_dims(np.arange(seq_length), <span class="hljs-number">0</span>), batch_size, axis=<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">for</span> i, context_length <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(context_lengths):<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> use_gmasks[i]:<br>                    position_ids[context_length:] = mask_positions[i]<br>        <span class="hljs-keyword">return</span> position_ids<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_position_ids_np</span>(<span class="hljs-params">self, input_ids</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Get position ids from input_ids with numpy&quot;&quot;&quot;</span><br>        mask, gmask = self.config.mask_token_id, self.config.gmask_token_id<br>        seqs = <span class="hljs-built_in">list</span>(input_ids)<br><br>        mask_positions, use_gmasks = [], []<br>        <span class="hljs-keyword">for</span> seq <span class="hljs-keyword">in</span> seqs:<br>            mask_token = gmask <span class="hljs-keyword">if</span> gmask <span class="hljs-keyword">in</span> seq <span class="hljs-keyword">else</span> mask<br>            use_gmask = mask_token == gmask<br>            mask_positions.append(<span class="hljs-built_in">list</span>(seq).index(mask_token))<br>            use_gmasks.append(use_gmask)<br>        position_ids = self.get_position_ids_np(input_ids, mask_positions, use_gmasks=<span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">return</span> position_ids<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_incremental_infer</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                           input_ids,</span><br><span class="hljs-params">                           current_index,</span><br><span class="hljs-params">                           valid_length_each_example,</span><br><span class="hljs-params">                           position_ids=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                           attention_mask=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                          user=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-comment"># Claim the first graph</span><br>        <span class="hljs-built_in">print</span>(user)<br>        <span class="hljs-keyword">if</span> self.is_first_iteration:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;first=======&quot;</span>)<br>            self.add_flags_recursive(is_first_iteration=<span class="hljs-literal">True</span>)<br>            res = self(<br>                input_ids=Tensor(input_ids, mstype.int32),<br>                <span class="hljs-comment"># input_ids (1,512) int32</span><br>                position_ids=Tensor(position_ids, mstype.int32),<br>                <span class="hljs-comment"># position_ids (1, 2, 512) int32</span><br>                attention_mask=Tensor(attention_mask, mstype.float32),<br>                <span class="hljs-comment"># attention_mask (1, 1, 512, 512) float32</span><br>                input_position=current_index,<br>                init_reset=Tensor([<span class="hljs-literal">False</span>], mstype.bool_),  <span class="hljs-comment"># init_reset (1,) bool False</span><br>                batch_valid_length=Tensor([valid_length_each_example], mstype.int32),<br>                user=user<br>            )  <span class="hljs-comment"># batch_valid_length (1,) int32 4</span><br>            <span class="hljs-comment"># first iter done, go to other iters</span><br>            self.is_first_iteration = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            self.add_flags_recursive(is_first_iteration=<span class="hljs-literal">False</span>)<br><br>            current_index_tmp = <span class="hljs-built_in">int</span>(current_index[<span class="hljs-number">0</span>])<br>            <span class="hljs-comment"># use numpy to slice array to avoid complie ascend slice op</span><br>            inputs_tmp = input_ids[:, current_index_tmp:current_index_tmp + <span class="hljs-number">1</span>]<br>            position_ids_tmp = position_ids[..., current_index_tmp:current_index_tmp + <span class="hljs-number">1</span>]<br>            attention_mask_tmp = attention_mask[:, :, current_index_tmp:current_index_tmp + <span class="hljs-number">1</span>, :]<br>            <span class="hljs-string">&#x27;&#x27;&#x27;print(&quot;inputs_tmp&quot;, inputs_tmp)</span><br><span class="hljs-string">            print(&quot;position_ids_tmp&quot;, position_ids_tmp)</span><br><span class="hljs-string">            print(&quot;attention_mask_tmp&quot;, attention_mask_tmp)&#x27;&#x27;&#x27;</span><br>            res = self(<br>                input_ids=Tensor(inputs_tmp, mstype.int32),<br>                <span class="hljs-comment"># input_ids (1,512) int32</span><br>                position_ids=Tensor(position_ids_tmp, mstype.int32),<br>                <span class="hljs-comment"># position_ids (1, 2, 1) int32</span><br>                attention_mask=Tensor(attention_mask_tmp, mstype.float32),<br>                <span class="hljs-comment"># attention_mask (1, 1, 1, 512) float32</span><br>                input_position=current_index,<br>                init_reset=Tensor([<span class="hljs-literal">True</span>], mstype.bool_),  <span class="hljs-comment"># init_reset (1,) bool True</span><br>                batch_valid_length=Tensor([valid_length_each_example], mstype.int32),<br>                user=user<br>            )  <span class="hljs-comment"># batch_valid_length (1,) int32 5</span><br><br>        <span class="hljs-keyword">return</span> res<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_stream_chat</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                 origin_inputs,</span><br><span class="hljs-params">                 top_k,</span><br><span class="hljs-params">                 top_p,</span><br><span class="hljs-params">                 repetition_penalty,</span><br><span class="hljs-params">                 max_length,</span><br><span class="hljs-params">                 eos_token_id,</span><br><span class="hljs-params">                 streamer=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                 pad_token_id=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                 tokenizer=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                    tlock=<span class="hljs-literal">None</span>, qi=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Text generation given the model and origin inputs</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Inputs:</span><br><span class="hljs-string">            model: The model to run the prediction</span><br><span class="hljs-string">            end_token(int): The model will stop generating the words when it reaches the end_token.</span><br><span class="hljs-string">            origin_inputs(list): The prompt for generation, should be a list of ids.</span><br><span class="hljs-string">            model_origin_max_length(int): The sequence length of the model trained.</span><br><span class="hljs-string">            max_length(int):  The maximum of generated length.</span><br><span class="hljs-string">            vocab_size(int): The vocabulary length of the model.</span><br><span class="hljs-string">            config: Inference configurations.</span><br><span class="hljs-string">            streamer: Streamer object that will be used to stream the generated sequences.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            outputs: the ids for the generated text</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> pad_token_id <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            pad_token_id = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># Get configurations for inference</span><br>        use_pynative = <span class="hljs-literal">True</span><br><br>        <span class="hljs-keyword">if</span> streamer <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            streamer.put(origin_inputs[<span class="hljs-number">0</span>])<br><br>        batch_size = origin_inputs.shape[<span class="hljs-number">0</span>]<br>        is_npu_acceleration = self.config.is_npu_acceleration<br>        valid_length_each_example = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(batch_size):<br>            <span class="hljs-comment"># As the nonzero returns the index and we need length</span><br>            valid_length_each_example.append(np.<span class="hljs-built_in">max</span>(np.argwhere(origin_inputs[i] != pad_token_id)) + <span class="hljs-number">1</span>)<br>        valid_length_each_example = np.array(valid_length_each_example)<br>        ori_valid_length_each_example = np.array(valid_length_each_example)<br>        <span class="hljs-keyword">if</span> np.<span class="hljs-built_in">max</span>(valid_length_each_example) &gt; max_length:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;The max_length set is smaller than the length in the input_ids. You shout set &quot;</span><br>                             <span class="hljs-string">f&quot;max_length to <span class="hljs-subst">&#123;np.<span class="hljs-built_in">max</span>(valid_length_each_example)&#125;</span>&quot;</span>)<br>        target_length = self.config.seq_length <span class="hljs-keyword">if</span> max_length &gt; self.config.seq_length <span class="hljs-keyword">else</span> max_length<br>        <span class="hljs-comment"># A list of the frequency of each token</span><br>        frequency_list = <span class="hljs-literal">None</span><br>        input_ids = self._pad_inputs_using_max_length(origin_inputs=origin_inputs, pad_token_id=pad_token_id)<br><br>        <span class="hljs-comment"># for GLM `attention_mask` and `position_ids` generation</span><br>        attention_mask = self.get_masks_np(input_ids)<br>        position_ids = self.create_position_ids_np(input_ids)<br><br>        input_mask = np.zeros_like(input_ids)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(valid_length_each_example.shape[<span class="hljs-number">0</span>]):<br>            input_mask[i, :valid_length_each_example[i]] = <span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># A single loop generates one token, loop until reaching target model_origin_max_length or generating eod token</span><br>        is_finished = [<span class="hljs-literal">False</span>] * batch_size<br><br>        <span class="hljs-comment"># setup is_first_iteration flag for incremental infer</span><br>        <span class="hljs-keyword">if</span> self.config.use_past:<br>            self.is_first_iteration = <span class="hljs-literal">True</span><br>        <br>        <br>        <br>        is_first_iteration = <span class="hljs-literal">True</span><br>        pre_text = <span class="hljs-string">&#x27;&#x27;</span><br>        assign = ops.Assign()<br>        <span class="hljs-keyword">while</span> np.<span class="hljs-built_in">sum</span>(is_finished) != batch_size:<br>            tlock.acquire()<br>            <span class="hljs-comment"># for GLM generation</span><br>            <span class="hljs-comment"># model basic setting</span><br>            self.top_p = top_p<br>            self.top_k = top_k<br>            self.repetition_penalty = repetition_penalty<br><br>            seq_length = input_ids.shape[<span class="hljs-number">1</span>]<br>            current_index = [valid_length_each_example[i] - <span class="hljs-number">1</span> + i * seq_length <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(batch_size)]<br>            current_index = Tensor(current_index, mstype.int32)<br><br>            <span class="hljs-keyword">if</span> self.config.use_past:<br>                self.is_first_iteration = is_first_iteration<br>                <span class="hljs-built_in">print</span>(origin_inputs[<span class="hljs-number">0</span>], is_first_iteration,self.is_first_iteration)<br>                <span class="hljs-comment"># print(origin_inputs[0], id(input_ids))</span><br>                <span class="hljs-keyword">if</span> is_first_iteration:<br>                    res = self._incremental_infer(<br>                        input_ids=input_ids,<br>                        position_ids=position_ids,<br>                        attention_mask=attention_mask,<br>                        current_index=current_index,<br>                        valid_length_each_example=valid_length_each_example,<br>                        user=qi<br>                    )<br>                    is_first_iteration = <span class="hljs-literal">False</span><br>                    self.is_first_iteration = is_first_iteration<br>                    <br>                <span class="hljs-keyword">else</span>:<br>                    <br>        <br>                    res = self._incremental_infer(<br>                        input_ids=input_ids,<br>                        position_ids=position_ids,<br>                        attention_mask=attention_mask,<br>                        current_index=current_index,<br>                        valid_length_each_example=valid_length_each_example,<br>                        user=qi<br>                    )<br>                    <br>                    <br>            <span class="hljs-keyword">else</span>:<br>                res = self(<br>                    input_ids=Tensor(input_ids, mstype.int32),<br>                    position_ids=Tensor(position_ids, mstype.int32),<br>                    attention_mask=Tensor(attention_mask, mstype.float32)<br>                )<br>            <span class="hljs-keyword">if</span> is_npu_acceleration:<br>                p, p_args = res<br>                p = p.asnumpy()<br>                p_args = p_args.asnumpy()<br>                <span class="hljs-comment"># Avoid rounding error</span><br>                p = precision_correct(p, top_p, top_k, batch_size)<br>                <span class="hljs-comment">#P.Depend()(p, tmp)</span><br>            <span class="hljs-keyword">else</span>:<br>                log_probs = self.process_logits(res, current_index, is_first_iteration, self.config.use_past)<br>                <span class="hljs-comment"># Sample</span><br>                log_probs = log_probs.asnumpy()<br>                vocab_size = log_probs.shape[-<span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">if</span> repetition_penalty != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> frequency_list <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                    frequency_list = np.array([[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(vocab_size)]])<br>                log_probs_revised = log_probs.reshape(batch_size, vocab_size)<br>                <span class="hljs-keyword">if</span> repetition_penalty != <span class="hljs-number">1</span>:<br>                    log_probs_revised = log_probs - frequency_list * repetition_penalty - \<br>                                        (frequency_list &gt; <span class="hljs-number">0</span>) * repetition_penalty<br>                p, p_args = sampler(log_probs_revised, top_p, top_k, use_pynative)<br>            <br>            <span class="hljs-comment"># Random select a token as final output for this round</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(batch_size):<br>                <span class="hljs-keyword">if</span> is_finished[i]:<br>                    <span class="hljs-keyword">continue</span><br>                target_index = np.random.choice(<span class="hljs-built_in">len</span>(p[i]), p=p[i])<br><br>                <span class="hljs-comment"># update frequency list</span><br>                target = p_args[i][target_index]<br><br>                <span class="hljs-keyword">if</span> repetition_penalty != <span class="hljs-number">1</span>:<br>                    frequency_list[<span class="hljs-number">0</span>][target] = frequency_list[<span class="hljs-number">0</span>][target] + <span class="hljs-number">1</span><br>                input_ids[i, valid_length_each_example[i]] = p_args[i, target_index]<br><br>                <span class="hljs-keyword">if</span> streamer <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                    streamer.put(np.asarray([target]))<br><br>                valid_length_each_example[i] += <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>)<br>                input_mask[i][valid_length_each_example[i] - <span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br><br>                <span class="hljs-comment"># Stop judgment</span><br>                <span class="hljs-keyword">if</span> p_args[i][target_index] == eos_token_id <span class="hljs-keyword">or</span> valid_length_each_example[i] == target_length:<br>                    is_finished[i] = <span class="hljs-literal">True</span><br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">else</span>:<br>                    text_tmp = tokenizer.decode(<br>                        input_ids[i, <span class="hljs-built_in">int</span>(ori_valid_length_each_example[i]):valid_length_each_example[i]])<br>                    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;�&quot;</span> <span class="hljs-keyword">in</span> text_tmp:<br>                        <span class="hljs-keyword">continue</span><br>                    <span class="hljs-keyword">else</span>:<br>                        cur_text = text_tmp<br>                        <span class="hljs-keyword">yield</span> cur_text<br>            tlock.release()<br>            <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_forward</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                 origin_inputs,</span><br><span class="hljs-params">                 top_k,</span><br><span class="hljs-params">                 top_p,</span><br><span class="hljs-params">                 repetition_penalty,</span><br><span class="hljs-params">                 max_length,</span><br><span class="hljs-params">                 eos_token_id,</span><br><span class="hljs-params">                 streamer=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                 pad_token_id=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Text generation given the model and origin inputs</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Inputs:</span><br><span class="hljs-string">            model: The model to run the prediction</span><br><span class="hljs-string">            end_token(int): The model will stop generating the words when it reaches the end_token.</span><br><span class="hljs-string">            origin_inputs(list): The prompt for generation, should be a list of ids.</span><br><span class="hljs-string">            model_origin_max_length(int): The sequence length of the model trained.</span><br><span class="hljs-string">            max_length(int):  The maximum of generated length.</span><br><span class="hljs-string">            vocab_size(int): The vocabulary length of the model.</span><br><span class="hljs-string">            config: Inference configurations.</span><br><span class="hljs-string">            streamer: Streamer object that will be used to stream the generated sequences.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            outputs: the ids for the generated text</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> pad_token_id <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            pad_token_id = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># Get configurations for inference</span><br>        use_pynative = <span class="hljs-literal">True</span><br><br>        <span class="hljs-keyword">if</span> streamer <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            streamer.put(origin_inputs[<span class="hljs-number">0</span>])<br><br>        batch_size = origin_inputs.shape[<span class="hljs-number">0</span>]<br>        is_npu_acceleration = self.config.is_npu_acceleration<br>        valid_length_each_example = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(batch_size):<br>            <span class="hljs-comment"># As the nonzero returns the index and we need length</span><br>            valid_length_each_example.append(np.<span class="hljs-built_in">max</span>(np.argwhere(origin_inputs[i] != pad_token_id)) + <span class="hljs-number">1</span>)<br>        valid_length_each_example = np.array(valid_length_each_example)<br>        <span class="hljs-keyword">if</span> np.<span class="hljs-built_in">max</span>(valid_length_each_example) &gt; max_length:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;The max_length set is smaller than the length in the input_ids. You shout set &quot;</span><br>                             <span class="hljs-string">f&quot;max_length to <span class="hljs-subst">&#123;np.<span class="hljs-built_in">max</span>(valid_length_each_example)&#125;</span>&quot;</span>)<br>        target_length = self.config.seq_length <span class="hljs-keyword">if</span> max_length &gt; self.config.seq_length <span class="hljs-keyword">else</span> max_length<br>        <span class="hljs-comment"># A list of the frequency of each token</span><br>        frequency_list = <span class="hljs-literal">None</span><br>        input_ids = self._pad_inputs_using_max_length(origin_inputs=origin_inputs, pad_token_id=pad_token_id)<br><br>        <span class="hljs-comment"># for GLM `attention_mask` and `position_ids` generation</span><br>        attention_mask = self.get_masks_np(input_ids)<br>        position_ids = self.create_position_ids_np(input_ids)<br><br>        input_mask = np.zeros_like(input_ids)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(valid_length_each_example.shape[<span class="hljs-number">0</span>]):<br>            input_mask[i, :valid_length_each_example[i]] = <span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># A single loop generates one token, loop until reaching target model_origin_max_length or generating eod token</span><br>        is_finished = [<span class="hljs-literal">False</span>] * batch_size<br><br>        <span class="hljs-comment"># setup is_first_iteration flag for incremental infer</span><br>        <span class="hljs-keyword">if</span> self.config.use_past:<br>            self.is_first_iteration = <span class="hljs-literal">True</span><br><br>        is_first_iteration = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">while</span> np.<span class="hljs-built_in">sum</span>(is_finished) != batch_size:<br>            <span class="hljs-comment"># for GLM generation</span><br>            <span class="hljs-comment"># model basic setting</span><br>            self.top_p = top_p<br>            self.top_k = top_k<br>            self.repetition_penalty = repetition_penalty<br><br>            seq_length = input_ids.shape[<span class="hljs-number">1</span>]<br>            current_index = [valid_length_each_example[i] - <span class="hljs-number">1</span> + i * seq_length <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(batch_size)]<br>            current_index = Tensor(current_index, mstype.int32)<br><br>            <span class="hljs-keyword">if</span> self.config.use_past:<br>                is_first_iteration = self.is_first_iteration<br>                res = self._incremental_infer(<br>                    input_ids=input_ids,<br>                    position_ids=position_ids,<br>                    attention_mask=attention_mask,<br>                    current_index=current_index,<br>                    valid_length_each_example=valid_length_each_example<br>                )<br>            <span class="hljs-keyword">else</span>:<br>                res = self(<br>                    input_ids=Tensor(input_ids, mstype.int32),<br>                    position_ids=Tensor(position_ids, mstype.int32),<br>                    attention_mask=Tensor(attention_mask, mstype.float32)<br>                )<br>            <span class="hljs-keyword">if</span> is_npu_acceleration:<br>                p, p_args = res<br>                p = p.asnumpy()<br>                p_args = p_args.asnumpy()<br>                <span class="hljs-comment"># Avoid rounding error</span><br>                p = precision_correct(p, top_p, top_k, batch_size)<br>            <span class="hljs-keyword">else</span>:<br>                log_probs = self.process_logits(res, current_index, is_first_iteration, self.config.use_past)<br>                <span class="hljs-comment"># Sample</span><br>                log_probs = log_probs.asnumpy()<br>                vocab_size = log_probs.shape[-<span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">if</span> repetition_penalty != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> frequency_list <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                    frequency_list = np.array([[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(vocab_size)]])<br>                log_probs_revised = log_probs.reshape(batch_size, vocab_size)<br>                <span class="hljs-keyword">if</span> repetition_penalty != <span class="hljs-number">1</span>:<br>                    log_probs_revised = log_probs - frequency_list * repetition_penalty - \<br>                                        (frequency_list &gt; <span class="hljs-number">0</span>) * repetition_penalty<br>                p, p_args = sampler(log_probs_revised, top_p, top_k, use_pynative)<br><br>            <span class="hljs-comment"># Random select a token as final output for this round</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(batch_size):<br>                <span class="hljs-keyword">if</span> is_finished[i]:<br>                    <span class="hljs-keyword">continue</span><br>                target_index = np.random.choice(<span class="hljs-built_in">len</span>(p[i]), p=p[i])<br><br>                <span class="hljs-comment"># update frequency list</span><br>                target = p_args[i][target_index]<br><br>                <span class="hljs-keyword">if</span> repetition_penalty != <span class="hljs-number">1</span>:<br>                    frequency_list[<span class="hljs-number">0</span>][target] = frequency_list[<span class="hljs-number">0</span>][target] + <span class="hljs-number">1</span><br>                input_ids[i, valid_length_each_example[i]] = p_args[i, target_index]<br><br>                <span class="hljs-keyword">if</span> streamer <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                    streamer.put(np.asarray([target]))<br><br>                valid_length_each_example[i] += <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>)<br>                input_mask[i][valid_length_each_example[i] - <span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br><br>                <span class="hljs-comment"># Stop judgment</span><br>                <span class="hljs-keyword">if</span> p_args[i][target_index] == eos_token_id <span class="hljs-keyword">or</span> valid_length_each_example[i] == target_length:<br>                    is_finished[i] = <span class="hljs-literal">True</span><br>                    <span class="hljs-keyword">continue</span><br><br>        <span class="hljs-comment"># Return valid outputs out of padded outputs</span><br>        output_ids = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(batch_size):<br>            output_ids.append(input_ids[i, : <span class="hljs-built_in">int</span>(valid_length_each_example[i])].astype(np.int32))<br>        <span class="hljs-keyword">if</span> streamer <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            streamer.end()<br>        <span class="hljs-keyword">return</span> output_ids<br><br>    <span class="hljs-comment"># pylint: disable=W0613</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">construct</span>(<span class="hljs-params">self, input_ids, label=<span class="hljs-literal">None</span>, position_ids=<span class="hljs-literal">None</span>, attention_mask=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                  input_position=<span class="hljs-literal">None</span>, init_reset=<span class="hljs-literal">True</span>, batch_valid_length=<span class="hljs-literal">None</span>, user=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Extract logits and calculate loss</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Inputs:</span><br><span class="hljs-string">            input_ids (Tensor): The tokenized inputs with dtype int32.</span><br><span class="hljs-string">            label (Tensor): The indices of input sequence tokens in the vocabulary.</span><br><span class="hljs-string">            position_ids (Tensor): Used to identify each token&#x27;s position in the list of tokens.</span><br><span class="hljs-string">            attention_mask (Tensor): Used when batching sequences together.</span><br><span class="hljs-string">            init_reset (bool, optional): Default: True.</span><br><span class="hljs-string">            batch_valid_length(Tensor, optional): Default: None.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            Training phase:</span><br><span class="hljs-string">                loss: Training loss.</span><br><span class="hljs-string">            Other phase:</span><br><span class="hljs-string">                logits (Tensor): The output logit of backbone.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        batch_size, seq_length = input_ids.shape<br><br>        <span class="hljs-keyword">if</span> self.phase == <span class="hljs-string">&quot;train&quot;</span>:<br>            tokens = self.stridedslice(input_ids, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (batch_size, seq_length), (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">else</span>:<br>            tokens = input_ids<br><br>        output_states, _ = self.transformer(tokens, position_ids,<br>                                            attention_mask, init_reset, batch_valid_length, user)<br>        logits = self.lm_head(output_states)<br><br>        <span class="hljs-keyword">if</span> self.phase != <span class="hljs-string">&#x27;train&#x27;</span>:<br>            <span class="hljs-keyword">return</span> logits<br><br>        logits_shape = logits.shape<br>        label = label.reshape((-<span class="hljs-number">1</span>,))<br>        logits = logits.reshape((-<span class="hljs-number">1</span>, logits_shape[-<span class="hljs-number">1</span>]))<br>        input_mask = self.ones(tokens.shape, logits.dtype)<br>        input_mask = input_mask.reshape((-<span class="hljs-number">1</span>,))<br>        loss = self.loss(logits, label, input_mask)<br>        <span class="hljs-keyword">return</span> loss<br><br><br><span class="hljs-meta">@MindFormerRegister.register(<span class="hljs-params">MindFormerModuleType.MODELS</span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GLMChatModel</span>(<span class="hljs-title class_ inherited__">GLMForPreTraining</span>):<br>    <span class="hljs-string">r&quot;&quot;&quot;</span><br><span class="hljs-string">    Provide glm chat capability through network.</span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        config (GLMConfig): The config of GLMModel.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Returns:</span><br><span class="hljs-string">        Tensor, the probability distribution of network loss.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    _support_list = MindFormerBook.get_model_support_list()[<span class="hljs-string">&#x27;glm&#x27;</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, config: GLMConfig</span>):<br>        <span class="hljs-built_in">super</span>(GLMChatModel, self).__init__(config)<br>        self.e = ms.Tensor(np.e, dtype=mstype.float32)<br>        self.<span class="hljs-built_in">pow</span> = P.Pow()<br>        self.topk = P.TopK(<span class="hljs-built_in">sorted</span>=<span class="hljs-literal">True</span>)<br>        self.cumsum = P.CumSum()<br>        <span class="hljs-keyword">if</span> is_version_ge(ms.__version__, <span class="hljs-string">&#x27;1.11.0&#x27;</span>):<br>            self.<span class="hljs-built_in">sum</span> = ops.<span class="hljs-built_in">sum</span><br>        <span class="hljs-keyword">else</span>:<br>            self.<span class="hljs-built_in">sum</span> = P.ReduceSum(keep_dims=<span class="hljs-literal">False</span>)<br>        self.vocab_size = config.vocab_size<br>        self.batch_size = config.batch_size<br>        self.frequency_list = ms.Tensor([[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.vocab_size)]])<br>        self.post_logits = ProcessLogits(use_past=config.use_past)<br>        <span class="hljs-comment"># seems not supported yet.</span><br>        <span class="hljs-comment"># self.top_p = config.top_p</span><br>        self.top_p = <span class="hljs-number">1</span><br>        self.top_k = config.top_k<br>        self.repetition_penalty = config.repetition_penalty<br>        self.is_first_iteration = <span class="hljs-literal">False</span><br>        self.is_npu_acceleration = config.is_npu_acceleration<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sample</span>(<span class="hljs-params">self, log_probs</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Convert the log_probs to probability&quot;&quot;&quot;</span><br><br>        <span class="hljs-keyword">if</span> self.repetition_penalty != <span class="hljs-number">1</span>:<br>            log_probs = log_probs - self.frequency_list * self.repetition_penalty - \<br>                        (self.frequency_list &gt; <span class="hljs-number">0</span>) * self.repetition_penalty<br><br>        <span class="hljs-comment"># Process sample in graph to accelerate generate</span><br>        logits = self.<span class="hljs-built_in">pow</span>(self.e, log_probs)<br><br>        <span class="hljs-comment"># If top_p is less than 1.0, use top_p sampling</span><br>        <span class="hljs-comment"># seems not supported yet.</span><br>        <span class="hljs-keyword">if</span> self.top_p &lt; <span class="hljs-number">1.0</span>:<br>            sorted_logits, index = self.topk(logits, <span class="hljs-number">5000</span>)<br>            cumsum_logits = self.cumsum(sorted_logits, <span class="hljs-number">1</span>)<br>            top_p_num = self.<span class="hljs-built_in">sum</span>((cumsum_logits &lt; self.top_p).astype(mstype.int32), -<span class="hljs-number">1</span>) + <span class="hljs-number">1</span><br>            top_p_num = <span class="hljs-built_in">int</span>(top_p_num)<br>            <span class="hljs-comment"># Get the corresponding probs and indices</span><br>            probs = sorted_logits[:, :top_p_num]<br>            p_args = index[:, :top_p_num]<br>            p = probs / self.<span class="hljs-built_in">sum</span>(probs, -<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-comment"># if top_p is set to 1.0, use top_k sampling</span><br>        <span class="hljs-keyword">else</span>:<br>            probs, p_args = self.topk(logits, self.top_k)<br>            p = probs<br><br>        <span class="hljs-keyword">return</span> p, p_args<br><br>    <span class="hljs-comment"># pylint:disable=arguments-differ</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">construct</span>(<span class="hljs-params">self, input_ids, position_ids=<span class="hljs-literal">None</span>, attention_mask=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                  input_position=<span class="hljs-literal">None</span>, init_reset=<span class="hljs-literal">True</span>, batch_valid_length=<span class="hljs-literal">None</span>, user=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Get probs and p_args&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># model forward</span><br>        output_states, _ = self.transformer(input_ids, position_ids, attention_mask, init_reset, batch_valid_length, user)<br>        logits = self.lm_head(output_states)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.is_npu_acceleration:<br>            <span class="hljs-keyword">return</span> logits<br><br>        <span class="hljs-comment"># logit post process</span><br>        log_probs = self.post_logits(logits, input_position, self.is_first_iteration)<br><br>        <span class="hljs-comment"># logit sort and sample</span><br>        probs, p_args = self.sample(log_probs)<br><br>        <span class="hljs-keyword">return</span> probs, p_args<br><br><br><span class="hljs-meta">@MindFormerRegister.register(<span class="hljs-params">MindFormerModuleType.MODELS</span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GLMForPreTrainingWithLora</span>(<span class="hljs-title class_ inherited__">GLMForPreTraining</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;GLM Model for pretraining with LoRA</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        config (GLMConfig): The config of network.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, config: GLMConfig = <span class="hljs-literal">None</span>, pet=<span class="hljs-literal">None</span>, **kwargs</span>):<br>        _ = kwargs<br>        <span class="hljs-built_in">super</span>().__init__(config)<br>        <span class="hljs-comment"># get Pet tuning model.</span><br>        self.pet = pet<br>        self.pet.pet_config.reg_rules = <span class="hljs-string">r&#x27;.*query_key_value*&#x27;</span><br>        self.transformer = LoraAdapter.get_pet_model(self.transformer, self.pet.pet_config)<br>        <span class="hljs-comment"># freeze pretrained model</span><br>        PetAdapter.freeze_pretrained_model(self, self.pet.pet_type)<br><br><br><span class="hljs-meta">@MindFormerRegister.register(<span class="hljs-params">MindFormerModuleType.MODELS</span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GLMChatModelWithLora</span>(<span class="hljs-title class_ inherited__">GLMChatModel</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;GLM Model for pretraining with LoRA</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        config (GLMConfig): The config of network.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, config: GLMConfig = <span class="hljs-literal">None</span>, pet=<span class="hljs-literal">None</span>, **kwargs</span>):<br>        _ = kwargs<br>        ckpt_cfg = config.checkpoint_name_or_path<br>        config.checkpoint_name_or_path = <span class="hljs-literal">None</span><br>        <span class="hljs-built_in">super</span>().__init__(config)<br>        <span class="hljs-comment"># get Pet tuning model.</span><br>        self.pet = pet<br>        self.pet.pet_config.reg_rules = <span class="hljs-string">r&#x27;.*query_key_value*&#x27;</span><br>        self.transformer = LoraAdapter.get_pet_model(self.transformer, self.pet.pet_config)<br>        config.checkpoint_name_or_path = ckpt_cfg<br>        self.load_checkpoint(config)<br></code></pre></td></tr></table></figure><h3 id="2-2-替换layers-py"><a href="#2-2-替换layers-py" class="headerlink" title="2.2 替换layers.py"></a>2.2 替换layers.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;base transformer layer.&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">import</span> mindspore <span class="hljs-keyword">as</span> ms<br><span class="hljs-keyword">from</span> mindspore <span class="hljs-keyword">import</span> Parameter, Tensor<br><span class="hljs-keyword">from</span> mindspore <span class="hljs-keyword">import</span> dtype <span class="hljs-keyword">as</span> mstype<br><span class="hljs-keyword">from</span> mindspore <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> mindspore.ops <span class="hljs-keyword">import</span> functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">from</span> mindspore.ops <span class="hljs-keyword">import</span> operations <span class="hljs-keyword">as</span> P<br><span class="hljs-keyword">from</span> mindspore <span class="hljs-keyword">import</span> ops<br><br><span class="hljs-keyword">from</span> mindformers.modules.layers <span class="hljs-keyword">import</span> LayerNorm, Linear<br><span class="hljs-keyword">from</span> mindformers.tools.utils <span class="hljs-keyword">import</span> is_version_ge<br><br><span class="hljs-keyword">from</span> mindformers.models.glm.attention <span class="hljs-keyword">import</span> RotaryEmbeddingFP32SoftmaxSelfAttention<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">userskv</span>(nn.Cell):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, kv_shape, params_dtype</span>):<br>        <span class="hljs-built_in">super</span>(userskv, self).__init__()<br>        self.k_past = Parameter(Tensor(np.zeros(shape=kv_shape), params_dtype))<br>        self.value_past = Parameter(Tensor(np.zeros(shape=kv_shape), params_dtype))<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GEGLU</span>(nn.Cell):<br>    <span class="hljs-string">&quot;&quot;&quot;GEGLU activation&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parallel_config</span>):<br>        <span class="hljs-built_in">super</span>(GEGLU, self).__init__()<br>        self.split = ops.Split(output_num=<span class="hljs-number">2</span>, axis=-<span class="hljs-number">1</span>)<br>        self.activation_fn = nn.GELU().gelu<br>        self.parallel_config = parallel_config<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">construct</span>(<span class="hljs-params">self, x</span>):<br>        x1, x2 = self.split(x)<br>        <span class="hljs-keyword">return</span> x1 * self.activation_fn(x2)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MLPWithGEGLU</span>(nn.Cell):<br>    <span class="hljs-string">&quot;&quot;&quot;MLP layer with GEGLU&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                 hidden_size,</span><br><span class="hljs-params">                 output_dropout_prob,</span><br><span class="hljs-params">                 inner_hidden_size=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                 layer_id=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                 bias=<span class="hljs-literal">True</span>,</span><br><span class="hljs-params">                 activation_func=<span class="hljs-string">&#x27;GELU&#x27;</span>,</span><br><span class="hljs-params">                 params_dtype=mstype.float32,</span><br><span class="hljs-params">                 compute_dtype=mstype.float16,</span><br><span class="hljs-params">                 parallel_config=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(MLPWithGEGLU, self).__init__()<br>        self.layer_id = layer_id<br>        <span class="hljs-comment"># Project to 4h.</span><br>        self.hidden_size = hidden_size<br><br>        <span class="hljs-keyword">if</span> inner_hidden_size <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            inner_hidden_size = <span class="hljs-number">4</span> * hidden_size<br><br>        self.inner_hidden_size = inner_hidden_size<br>        <span class="hljs-keyword">if</span> activation_func == <span class="hljs-string">&#x27;GEGLU&#x27;</span>:<br>            self.activation_func = GEGLU(parallel_config)<br>            h_to_4h_output_channel = <span class="hljs-number">2</span> * self.inner_hidden_size<br>        <span class="hljs-keyword">elif</span> activation_func == <span class="hljs-string">&#x27;GELU&#x27;</span>:<br>            self.activation_func = nn.GELU()<br>            self.activation_func.gelu.shard(((parallel_config.data_parallel, <span class="hljs-number">1</span>, parallel_config.model_parallel),))<br>            h_to_4h_output_channel = self.inner_hidden_size<br><br>        self.dense_h_to_4h = Linear(<br>            self.hidden_size,<br>            h_to_4h_output_channel,<br>            has_bias=bias,<br>            transpose_b=<span class="hljs-literal">True</span>,<br>            param_init_type=params_dtype,<br>            compute_dtype=compute_dtype,<br>        )<br>        self.dense_h_to_4h.shard(<br>            strategy_matmul=((parallel_config.data_parallel, <span class="hljs-number">1</span>), (parallel_config.model_parallel, <span class="hljs-number">1</span>)),<br>            strategy_bias=((parallel_config.data_parallel, parallel_config.model_parallel),<br>                           (parallel_config.model_parallel,)))<br><br>        <span class="hljs-comment"># Project back to h.</span><br>        self.dense_4h_to_h = Linear(<br>            self.inner_hidden_size,<br>            self.hidden_size,<br>            has_bias=bias,<br>            param_init_type=params_dtype,<br>            compute_dtype=compute_dtype,<br>        )<br>        self.dense_4h_to_h.shard(<br>            strategy_matmul=((parallel_config.data_parallel, parallel_config.model_parallel),<br>                             (<span class="hljs-number">1</span>, parallel_config.model_parallel)),<br>            strategy_bias=((parallel_config.data_parallel, <span class="hljs-number">1</span>), (<span class="hljs-number">1</span>,))<br>            )<br><br>        <span class="hljs-keyword">if</span> is_version_ge(ms.__version__, <span class="hljs-string">&#x27;1.11.0&#x27;</span>):<br>            self.dropout = nn.Dropout(p=output_dropout_prob)<br>        <span class="hljs-keyword">else</span>:<br>            self.dropout = nn.Dropout(keep_prob=<span class="hljs-number">1</span> - output_dropout_prob)<br>        self.dropout.dropout.shard(((parallel_config.data_parallel, parallel_config.model_parallel),))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mlp_forward</span>(<span class="hljs-params">self, hidden_states</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;mlp forward.&quot;&quot;&quot;</span><br>        intermediate_parallel = self.dense_h_to_4h(hidden_states)<br>        intermediate_parallel = self.activation_func(intermediate_parallel)<br>        output = self.dense_4h_to_h(intermediate_parallel)<br>        <span class="hljs-keyword">return</span> output<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">construct</span>(<span class="hljs-params">self, hidden_states</span>):<br>        output = self.mlp_forward(hidden_states)<br><br>        <span class="hljs-keyword">if</span> self.training:<br>            output = self.dropout(output)<br>        <span class="hljs-keyword">return</span> output<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DeepNormWithGLULayer</span>(nn.Cell):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    GLM base layer</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        num_layers (int): Number of layers.</span><br><span class="hljs-string">        hidden_size (int): Hidden layer size.</span><br><span class="hljs-string">        num_attention_heads (int): Number of attention heads.</span><br><span class="hljs-string">        batch_size (int): Batch size.</span><br><span class="hljs-string">        attention_dropout_prob (float, [0, 1.0]): Attention layer dropout probability.</span><br><span class="hljs-string">        output_dropout_prob (float, [0, 1.0]): Output dropout probability.</span><br><span class="hljs-string">        layernorm_epsilon (float): Layernorm epsilon.</span><br><span class="hljs-string">        layer_id (int): Layer id.</span><br><span class="hljs-string">        max_seq_len (int): Max sequence length.</span><br><span class="hljs-string">        inner_hidden_size (optional): Inner hidden layer size. Default: None.</span><br><span class="hljs-string">        hidden_size_per_attention_head (optional): Default: None.</span><br><span class="hljs-string">        layernorm_order (str, optional): Which order to use layernorm. Default: &#x27;pre&#x27;.</span><br><span class="hljs-string">        layernorm (optional): Layernorm function. Default: LayerNorm.</span><br><span class="hljs-string">        use_bias (bool, optional): Use bias or not. Default: True.</span><br><span class="hljs-string">        activation_func (str, optional, &#x27;GEGLU&#x27;/&#x27;GELU&#x27;): Choose activation function. Default: &#x27;GEGLU&#x27;.</span><br><span class="hljs-string">        position_encoding_2d (bool, optional): Use 2d position encoding or not. Default: True.</span><br><span class="hljs-string">        params_dtype (ms.dtype, optional): Parameter data type. Default: mstype.float32.</span><br><span class="hljs-string">        layernorm_dtype (ms.dtype, optional): Calculate layernorm data type. Default: mstype.float32.</span><br><span class="hljs-string">        softmax_dtype (ms.dtype, optional): Calculate softmax data type. Default: mstype.float32.</span><br><span class="hljs-string">        compute_dtype (ms.dtype, optional): Other compute data type. Default: mstype.float16.</span><br><span class="hljs-string">        parallel_config (optional): Operator parallel strategy, Default: None.</span><br><span class="hljs-string">        use_past (bool, optional): Use infer cache or not. Default: False.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                 num_layers,</span><br><span class="hljs-params">                 hidden_size,</span><br><span class="hljs-params">                 num_attention_heads,</span><br><span class="hljs-params">                 batch_size,</span><br><span class="hljs-params">                 attention_dropout_prob,</span><br><span class="hljs-params">                 output_dropout_prob,</span><br><span class="hljs-params">                 layernorm_epsilon,</span><br><span class="hljs-params">                 layer_id,</span><br><span class="hljs-params">                 max_seq_len=<span class="hljs-number">512</span>,</span><br><span class="hljs-params">                 inner_hidden_size=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                 hidden_size_per_attention_head=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                 layernorm_order=<span class="hljs-string">&#x27;pre&#x27;</span>,</span><br><span class="hljs-params">                 layernorm=LayerNorm,</span><br><span class="hljs-params">                 use_bias=<span class="hljs-literal">True</span>,</span><br><span class="hljs-params">                 activation_func=<span class="hljs-string">&#x27;GEGLU&#x27;</span>,</span><br><span class="hljs-params">                 position_encoding_2d=<span class="hljs-literal">True</span>,</span><br><span class="hljs-params">                 params_dtype=mstype.float32,</span><br><span class="hljs-params">                 layernorm_dtype=mstype.float32,</span><br><span class="hljs-params">                 softmax_dtype=mstype.float32,</span><br><span class="hljs-params">                 compute_dtype=mstype.float16,</span><br><span class="hljs-params">                 parallel_config=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                 use_past=<span class="hljs-literal">False</span>,</span><br><span class="hljs-params">                users=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-built_in">super</span>(DeepNormWithGLULayer, self).__init__()<br>        <span class="hljs-comment"># Set output layer initialization if not provided.</span><br>        self.num_layers = num_layers<br>        self.hidden_size = hidden_size<br>        self.layer_id = layer_id<br>        <span class="hljs-keyword">if</span> inner_hidden_size <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            inner_hidden_size = <span class="hljs-number">4</span> * hidden_size * <span class="hljs-number">2</span> // <span class="hljs-number">3</span><br>        self.inner_hidden_size = inner_hidden_size<br>        self.position_encoding_2d = position_encoding_2d<br>        self.layernorm_order = layernorm_order<br>        self.use_past = use_past<br><br>        self.params_dtype = params_dtype<br>        self.layernorm_dtype = layernorm_dtype<br>        self.softmax_dtype = softmax_dtype<br>        self.compute_dtype = compute_dtype<br><br>        <span class="hljs-comment"># Layernorm on the input data.</span><br>        self.input_layernorm = layernorm(hidden_size, param_init_type=layernorm_dtype, eps=layernorm_epsilon)<br>        self.input_layernorm.shard(((parallel_config.data_parallel, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>),))<br><br>        <span class="hljs-comment"># Self attention.</span><br>        self.attention = RotaryEmbeddingFP32SoftmaxSelfAttention(<br>            hidden_size,<br>            batch_size,<br>            num_attention_heads,<br>            parallel_config,<br>            attention_dropout_prob,<br>            output_dropout_prob,<br>            layer_id,<br>            hidden_size_per_attention_head=hidden_size_per_attention_head,<br>            position_encoding_2d=self.position_encoding_2d,<br>            bias=use_bias,<br>            params_dtype=params_dtype,<br>            softmax_dtype=softmax_dtype,<br>            compute_dtype=compute_dtype,<br>            max_seq_len=max_seq_len,<br>            use_past=use_past,<br>        )<br><br>        <span class="hljs-comment"># Layernorm on the input data.</span><br>        self.post_attention_layernorm = layernorm(hidden_size, param_init_type=layernorm_dtype, eps=layernorm_epsilon)<br>        self.post_attention_layernorm.shard(((parallel_config.data_parallel, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>),))<br>        <span class="hljs-keyword">if</span> self.layernorm_order == <span class="hljs-string">&#x27;sandwich&#x27;</span>:<br>            self.third_layernorm = layernorm(hidden_size, param_init_type=layernorm_dtype, eps=layernorm_epsilon)<br>            self.fourth_layernorm = layernorm(hidden_size, param_init_type=layernorm_dtype, eps=layernorm_epsilon)<br><br>        <span class="hljs-comment"># MLP</span><br>        self.mlp = MLPWithGEGLU(<br>            hidden_size,<br>            output_dropout_prob,<br>            inner_hidden_size=inner_hidden_size,<br>            bias=use_bias,<br>            layer_id=layer_id,<br>            activation_func=activation_func,<br>            params_dtype=params_dtype,<br>            parallel_config=parallel_config<br>        )<br><br>        self.key_past = <span class="hljs-literal">None</span><br>        self.value_past = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> self.use_past:<br>            <span class="hljs-comment"># operator used for state reuse</span><br>            self.reducesum = P.ReduceSum().shard(((<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>),))<br>            self.not_equal = P.NotEqual().shard(((<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), ()))<br>            self.<span class="hljs-built_in">slice</span> = P.StridedSlice().shard(((<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>),))<br>            size_per_head = <span class="hljs-built_in">int</span>(hidden_size / num_attention_heads)<br>            self.kv_shape = (batch_size, num_attention_heads, size_per_head, max_seq_len)<br>            <span class="hljs-comment"># parameters saving key and value states</span><br>            <br>            self.kv_past = nn.CellList()<br>            <br>            <span class="hljs-keyword">for</span> tmp <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(users):<br>                self.kv_past.append(userskv(self.kv_shape, self.params_dtype))<br>                <br>                <br>            <span class="hljs-comment"># self.key_past = Parameter(Tensor(np.zeros(shape=self.kv_shape), self.params_dtype), name=&quot;key_past&quot;)</span><br>            <span class="hljs-comment"># self.value_past = Parameter(Tensor(np.zeros(shape=self.kv_shape), self.params_dtype), name=&quot;value_past&quot;)</span><br>            self.tile = P.Tile().shard(((<span class="hljs-number">1</span>, <span class="hljs-number">1</span>),))<br>            self.mul = P.Mul().shard(((<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), ()))<br>            self.assign = P.Assign().shard(((<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)))<br>        self.mul = P.Mul()<br>        self.mul.shard(((parallel_config.data_parallel, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), ()))<br>        self.mul_4 = P.Mul()<br>        self.mul_4.shard(((parallel_config.data_parallel, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), (parallel_config.data_parallel,)))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">layer_forward</span>(<span class="hljs-params">self, hidden_states, mask, position_ids, init_reset=<span class="hljs-literal">True</span>, batch_valid_length=<span class="hljs-literal">None</span>, user=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            hidden_states: [seq_len, batch, hidden_size] with (1, dp, 1)</span><br><span class="hljs-string">            mask: [(1, 1), seq_len, seq_len]</span><br><span class="hljs-string">        Inputs:</span><br><span class="hljs-string">            hidden_states (Tensor): Hidden layer output.</span><br><span class="hljs-string">            mask (Tensor): Used when batching sequences together.</span><br><span class="hljs-string">            position_ids (Tensor): Used to identify each token&#x27;s position in the list of tokens.</span><br><span class="hljs-string">            init_reset (bool, optional): Default: True.</span><br><span class="hljs-string">            batch_valid_length (Tensor, optional): Default: None.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Return:</span><br><span class="hljs-string">            output (Tensor): Layer output.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># Layer norm at the beginning of the transformer layer.</span><br>        attention_input = self.input_layernorm(hidden_states)<br><br>        <span class="hljs-comment"># indicate whether reset saved states</span><br>        key_reset = <span class="hljs-literal">None</span><br>        value_reset = <span class="hljs-literal">None</span><br><br>        <span class="hljs-keyword">if</span> self.use_past:<br>            <span class="hljs-comment"># reset states, init_reset True for reuse and False for reset</span><br>            key_reset = self.assign(self.kv_past[user].k_past, self.mul_4(self.kv_past[user].k_past, F.cast(init_reset, self.params_dtype)))<br>            value_reset = self.assign(self.kv_past[user].value_past,<br>                                      self.mul_4(self.kv_past[user].value_past, F.cast(init_reset, self.params_dtype)))<br>            <span class="hljs-comment"># add dependency for desired execution order</span><br>            attention_input = F.depend(attention_input, key_reset)<br>            attention_input = F.depend(attention_input, value_reset)<br>        <span class="hljs-comment"># t1 = self.key_past</span><br>        <span class="hljs-comment"># tmp = self.key_past[user].value()</span><br>        <span class="hljs-comment"># k_tmp = Parameter(self.key_past[user].value(), name=&quot;k_tmp&quot;)</span><br>        <span class="hljs-comment"># v_tmp = Parameter(self.value_past[user].value(), name=&quot;v_tmp&quot;)</span><br>        attention_output, layer_present = self.attention(attention_input, mask, position_ids, self.layer_id,<br>                                                        self.kv_past[user].k_past, self.kv_past[user].value_past, batch_valid_length)<br><br>        <span class="hljs-comment"># Residual connection.</span><br>        alpha = (<span class="hljs-number">2</span> * self.num_layers) ** <span class="hljs-number">0.5</span><br>        hidden_states = self.mul(attention_input, alpha) + attention_output<br><br>        mlp_input = self.post_attention_layernorm(hidden_states)<br><br>        <span class="hljs-comment"># MLP.</span><br>        mlp_output = self.mlp(mlp_input)<br><br>        value_update = <span class="hljs-literal">None</span><br>        key_update = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> self.use_past:<br>            <span class="hljs-comment"># current key and value</span><br>            key_present, value_present = layer_present<br>            <span class="hljs-comment"># update key and value calculated this step</span><br>            key_update = self.assign(self.kv_past[user].k_past, key_present)<br>            value_update = self.assign(self.kv_past[user].value_past, value_present)<br>            <span class="hljs-comment"># add dependency for desired execution order</span><br>            key_update = F.depend(key_update, key_reset)<br>            value_update = F.depend(value_update, value_reset)<br><br>        <span class="hljs-comment"># add dependency for desired execution order</span><br>        mlp_output = F.depend(mlp_output, value_update)<br>        mlp_output = F.depend(mlp_output, key_update)<br>        <span class="hljs-comment"># Second residual connection.</span><br>        output = mlp_input * alpha + mlp_output<br><br>        <span class="hljs-keyword">return</span> output<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">construct</span>(<span class="hljs-params">self, hidden_states, mask, position_ids, init_reset=<span class="hljs-literal">True</span>, batch_valid_length=<span class="hljs-literal">None</span>, user=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            hidden_states: [batch, seq_len, hidden_size]</span><br><span class="hljs-string">            mask: [(1, 1), seq_len, seq_len]</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">return</span> self.layer_forward(hidden_states, mask, position_ids, init_reset, batch_valid_length, user)<br></code></pre></td></tr></table></figure><h2 id="3-接口访问"><a href="#3-接口访问" class="headerlink" title="3. 接口访问"></a>3. 接口访问</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> fastapi <span class="hljs-string">&quot;uvicorn[standard]&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-1-接口"><a href="#3-1-接口" class="headerlink" title="3.1 接口"></a>3.1 接口</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ast<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">import</span> mindspore <span class="hljs-keyword">as</span> ms<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> uvicorn<br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br><span class="hljs-keyword">from</span> mindformers.models.glm <span class="hljs-keyword">import</span> GLMConfig, GLMChatModel<br><span class="hljs-keyword">from</span> mindformers.models.glm.chatglm_6b_tokenizer <span class="hljs-keyword">import</span> ChatGLMTokenizer<br><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel<br><span class="hljs-keyword">from</span> starlette.responses <span class="hljs-keyword">import</span> StreamingResponse<br><span class="hljs-keyword">import</span> queue<br><br>tlock = threading.Lock()<br><br><br><br>app = FastAPI()<br><br><br>users = <span class="hljs-number">2</span><br><br>avai_users = queue.Queue()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(users):<br>    avai_users.put(i)<br><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">QueryInfo</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    query: <span class="hljs-built_in">str</span><br>    history: <span class="hljs-built_in">str</span><br><br><br><span class="hljs-comment"># 生成数据流</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_data</span>(<span class="hljs-params">generation_kwargs</span>):<br>    result = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> new_text <span class="hljs-keyword">in</span> model._stream_chat(**generation_kwargs):<br>        <span class="hljs-built_in">print</span>(generation_kwargs[<span class="hljs-string">&#x27;qi&#x27;</span>],time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time())), new_text)<br>        <span class="hljs-keyword">yield</span> new_text<br>    avai_users.put(generation_kwargs[<span class="hljs-string">&#x27;qi&#x27;</span>])<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_data_fun</span>(<span class="hljs-params">generation_kwargs</span>):<br>    result = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> new_text <span class="hljs-keyword">in</span> model._stream_chat(**generation_kwargs):<br>        <span class="hljs-built_in">print</span>(generation_kwargs[<span class="hljs-string">&#x27;qi&#x27;</span>],time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time())), new_text)<br><br><br><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/stream&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_item</span>(<span class="hljs-params">queryinfo: QueryInfo</span>):<br>    query = queryinfo.query<br>    history = queryinfo.history<br>    <br>    <span class="hljs-keyword">try</span>:<br>        user = avai_users.get(timeout=<span class="hljs-number">6</span>)<br>    <span class="hljs-keyword">except</span> queue.Empty:<br>        <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;exit&quot;</span>)<br><br>    <span class="hljs-built_in">print</span>(history, <span class="hljs-built_in">type</span>(history))<br>    <span class="hljs-keyword">if</span> history == <span class="hljs-string">&#x27;[]&#x27;</span>:<br>        prompt = query<br>    <span class="hljs-keyword">else</span>:<br>        history = ast.literal_eval(history)<br>        prompt = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> i, (old_query, response) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(history):<br>            prompt += <span class="hljs-string">&quot;[Round &#123;&#125;]\n问：&#123;&#125;\n答：&#123;&#125;\n&quot;</span>.<span class="hljs-built_in">format</span>(i, old_query, response)<br>        prompt += <span class="hljs-string">&quot;[Round &#123;&#125;]\n问：&#123;&#125;\n答：&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(history), query)<br>    inputs = tokenizer(prompt)<br>    generation_kwargs = <span class="hljs-built_in">dict</span>(<br>        origin_inputs=np.expand_dims(np.array(inputs[<span class="hljs-string">&#x27;input_ids&#x27;</span>]).astype(np.int32), <span class="hljs-number">0</span>),<br>        top_k=<span class="hljs-number">1</span>,<br>        top_p=<span class="hljs-number">1</span>,<br>        repetition_penalty=<span class="hljs-number">1</span>,<br>        max_length=config.seq_length,<br>        eos_token_id=config.eos_token_id,<br>        pad_token_id=config.pad_token_id,<br>        tokenizer=tokenizer, tlock=tlock, qi=user)<br>    sr = generate_data(generation_kwargs)<br><br>    <span class="hljs-keyword">return</span> StreamingResponse(sr, media_type=<span class="hljs-string">&quot;text/plain&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    config = GLMConfig(<br>        position_encoding_2d=<span class="hljs-literal">True</span>,<br>        use_past=<span class="hljs-literal">True</span>,<br>        is_npu_acceleration=<span class="hljs-literal">True</span>,<br>        users=users<br>    )<br>    ms.set_context(mode=ms.GRAPH_MODE, device_target=<span class="hljs-string">&quot;Ascend&quot;</span>, device_id=<span class="hljs-number">1</span>)<br>    model = GLMChatModel(config)<br>    ms.load_checkpoint(<span class="hljs-string">&quot;/home/ma-user/work/MindFormers/checkpoint_download/glm/glm_6b.ckpt&quot;</span>, model)<br>    tokenizer = ChatGLMTokenizer(<span class="hljs-string">&#x27;/home/ma-user/work/checkpoint_download/glm/ice_text.model&#x27;</span>)<br>    inputs = tokenizer(<span class="hljs-string">&quot;你好&quot;</span>)<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(users):<br>        generation_kwargs = <span class="hljs-built_in">dict</span>(<br>            origin_inputs=np.expand_dims(np.array(inputs[<span class="hljs-string">&#x27;input_ids&#x27;</span>]).astype(np.int32), <span class="hljs-number">0</span>),<br>            top_k=<span class="hljs-number">1</span>,<br>            top_p=<span class="hljs-number">1</span>,<br>            repetition_penalty=<span class="hljs-number">1</span>,<br>            max_length=config.seq_length,<br>            eos_token_id=config.eos_token_id,<br>            pad_token_id=config.pad_token_id,<br>            tokenizer=tokenizer, tlock=tlock, qi=i)<br>        th = threading.Thread(target=generate_data_fun, args=(generation_kwargs,))<br>        th.start()<br><br>    <span class="hljs-comment"># for i in model._stream_chat(</span><br>    <span class="hljs-comment">#         origin_inputs=np.expand_dims(np.array(inputs[&#x27;input_ids&#x27;]).astype(np.int32), 0),</span><br>    <span class="hljs-comment">#         top_k=1,</span><br>    <span class="hljs-comment">#         top_p=1,</span><br>    <span class="hljs-comment">#         repetition_penalty=1,</span><br>    <span class="hljs-comment">#         max_length=config.seq_length,</span><br>    <span class="hljs-comment">#         eos_token_id=config.eos_token_id,</span><br>    <span class="hljs-comment">#         pad_token_id=config.pad_token_id,</span><br>    <span class="hljs-comment">#         tokenizer=tokenizer, tlock=tlock):</span><br>    <span class="hljs-comment">#     print(time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, time.localtime(time.time())), i)</span><br>    uvicorn.run(app, host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">30000</span>, workers=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="3-2-测试接口"><a href="#3-2-测试接口" class="headerlink" title="3.2 测试接口"></a>3.2 测试接口</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br>url = <span class="hljs-string">&#x27;http://127.0.0.1:30000/stream/&#x27;</span><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">n</span>):<br>    query = &#123;<span class="hljs-number">0</span>:<span class="hljs-string">&quot;什么叫好天气&quot;</span>,<br>             <span class="hljs-number">1</span>:<span class="hljs-string">&#x27;柯南是谁&#x27;</span>,<br>             <span class="hljs-number">2</span>:<span class="hljs-string">&#x27;天空是什么颜色的&#x27;</span>,<br>             <span class="hljs-number">3</span>:<span class="hljs-string">&#x27;浙江在哪&#x27;</span>,<br>             <span class="hljs-number">4</span>:<span class="hljs-string">&#x27;你好&#x27;</span>,<br>             <span class="hljs-number">5</span>:<span class="hljs-string">&#x27;静夜思怎么背&#x27;</span>,<br>             <span class="hljs-number">6</span>:<span class="hljs-string">&#x27;春节是什么时候&#x27;</span>,<br>             &#125;[n]<br>    query = <span class="hljs-string">&quot;请问答问题，字数不要超过60字，问题：&quot;</span>+query<br>    data = &#123;<br>        <span class="hljs-string">&quot;query&quot;</span>: query,<br>        <span class="hljs-string">&quot;history&quot;</span>: <span class="hljs-string">&#x27;[]&#x27;</span><br>    &#125;<br>    rsp = requests.post(url, json=data, stream=<span class="hljs-literal">True</span>)<br>    start_time = time.time()<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> rsp.iter_content(chunk_size=<span class="hljs-number">2000</span>):<br>        <span class="hljs-keyword">if</span> chunk:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(n)*<span class="hljs-number">10</span>,chunk.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))  <span class="hljs-comment"># 在这里对接收到的数据进行处理，例如打印出来</span><br>            count+=<span class="hljs-number">1</span><br>    end_time = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;generate speed: <span class="hljs-subst">&#123;count/(end_time-start_time):<span class="hljs-number">.2</span>f&#125;</span> tokens/s&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>*<span class="hljs-number">10</span>,<span class="hljs-string">&quot;over&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    th = threading.Thread(target=f, args=(i,))<br>    th.start()<br></code></pre></td></tr></table></figure><p><img src="https://cleansely.top:48083/i/2023/08/17/64ddcc8110fb6.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>昇腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>modelarts</tag>
      
      <tag>mindformers</tag>
      
      <tag>chatglm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bms部署chatglm-ms-demo</title>
    <link href="/2023/08/15/bms%E9%83%A8%E7%BD%B2chatglm-ms-demo/"/>
    <url>/2023/08/15/bms%E9%83%A8%E7%BD%B2chatglm-ms-demo/</url>
    
    <content type="html"><![CDATA[<h1 id="bms部署chatglm-ms-demo"><a href="#bms部署chatglm-ms-demo" class="headerlink" title="bms部署chatglm-ms-demo"></a>bms部署chatglm-ms-demo</h1><h2 id="1-ssh连接"><a href="#1-ssh连接" class="headerlink" title="1. ssh连接"></a>1. ssh连接</h2><p>ip：<br>user:root<br>pwd:</p><h2 id="2-换源"><a href="#2-换源" class="headerlink" title="2. 换源"></a>2. 换源</h2><h3 id="2-1-删除源文件"><a href="#2-1-删除源文件" class="headerlink" title="2.1 删除源文件"></a>2.1 删除源文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rm -f <span class="hljs-regexp">/etc/yum</span>.repos.d/EulerOS-ISO.repo<br></code></pre></td></tr></table></figure><h3 id="2-2-新建源文件"><a href="#2-2-新建源文件" class="headerlink" title="2.2 新建源文件"></a>2.2 新建源文件</h3><p><code>vi /etc/yum.repos.d/EulerOS.repo</code></p><p>内容为</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[base]</span><br><span class="hljs-attr">name</span>=EulerOS-<span class="hljs-number">2.0</span>SP8 base<br><span class="hljs-attr">baseurl</span>=https://mirrors.huaweicloud.com/euler/<span class="hljs-number">2.8</span>/os/aarch64/<br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">sslverify</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">gpgkey</span>=https://mirrors.huaweicloud.com/euler/<span class="hljs-number">2.8</span>/os/RPM-GPG-KEY-EulerOS<br></code></pre></td></tr></table></figure><p>重建缓存</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">yum clean <span class="hljs-keyword">all</span><br>yum makecache<br></code></pre></td></tr></table></figure><h2 id="3-更新固件驱动"><a href="#3-更新固件驱动" class="headerlink" title="3. 更新固件驱动"></a>3. 更新固件驱动</h2><h3 id="3-下载驱动"><a href="#3-下载驱动" class="headerlink" title="3. 下载驱动"></a>3. 下载驱动</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 新建下载文件夹</span><br>cd /home<br>mkdir -p work/downloads<br>cd work<span class="hljs-regexp">/downloads/</span><br><br><span class="hljs-comment"># 下载</span><br>wget https:<span class="hljs-regexp">//</span>nbfae.obs.cn-east-xxx.nbaicc.com<span class="hljs-regexp">/pkgs/</span>firmware_c85/Ascend-hdk-<span class="hljs-number">910</span>-npu-driver_23.<span class="hljs-number">0</span>.rc1_linux-aarch64.run<br>wget https:<span class="hljs-regexp">//</span>nbfae.obs.cn-east-xxx.nbaicc.com<span class="hljs-regexp">/pkgs/</span>firmware_c85/Ascend-hdk-<span class="hljs-number">910</span>-npu-firmware_6.<span class="hljs-number">3.0</span>.<span class="hljs-number">1.241</span>.run<br>wget https:<span class="hljs-regexp">//</span>nbfae.obs.cn-east-xxx.nbaicc.com<span class="hljs-regexp">/pkgs/</span>Ascend-cann-toolkit_6.<span class="hljs-number">3</span>.RC1_linux-aarch64.run<br></code></pre></td></tr></table></figure><h3 id="3-2-安装驱动"><a href="#3-2-安装驱动" class="headerlink" title="3.2 安装驱动"></a>3.2 安装驱动</h3><p>可执行权限</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> +x Ascend-hdk-<span class="hljs-number">910</span>-npu-firmware_<span class="hljs-number">6.3.0.1</span>.<span class="hljs-number">241</span>.run<br><span class="hljs-attribute">chmod</span> +x Ascend-hdk-<span class="hljs-number">910</span>-npu-driver_23.<span class="hljs-number">0</span>.rc1_linux-aarch64.run<br><span class="hljs-attribute">chmod</span> +x Ascend-cann-toolkit_6.<span class="hljs-number">3</span>.RC1_linux-aarch64.run<br></code></pre></td></tr></table></figure><p>升级安装</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">./Ascend-hdk<span class="hljs-number">-910</span>-npu-firmware_6<span class="hljs-number">.3</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-number">.241</span>.<span class="hljs-built_in">run</span> <span class="hljs-comment">--upgrade</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">./Ascend-hdk-<span class="hljs-number">910</span>-npu-driver_23.<span class="hljs-number">0</span><span class="hljs-selector-class">.rc1_linux-aarch64</span><span class="hljs-selector-class">.run</span> <span class="hljs-attr">--upgrade</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">./Ascend-cann-toolkit_6.<span class="hljs-number">3</span><span class="hljs-selector-class">.RC1_linux-aarch64</span><span class="hljs-selector-class">.run</span> <span class="hljs-attr">--install</span><br></code></pre></td></tr></table></figure><h3 id="3-3-重启服务器"><a href="#3-3-重启服务器" class="headerlink" title="3.3 重启服务器"></a>3.3 重启服务器</h3><p><code>reboot</code></p><h2 id="4-安装docker"><a href="#4-安装docker" class="headerlink" title="4. 安装docker"></a>4. 安装docker</h2><h3 id="4-1-yum安装docker"><a href="#4-1-yum安装docker" class="headerlink" title="4.1 yum安装docker"></a>4.1 yum安装docker</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y docker<br></code></pre></td></tr></table></figure><h3 id="4-2-安装docker-runtime"><a href="#4-2-安装docker-runtime" class="headerlink" title="4.2 安装docker runtime"></a>4.2 安装docker runtime</h3><p>下载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/home/</span>work/downloads<br>wget https:<span class="hljs-regexp">//</span>nbfae.obs.cn-east-xxx.nbaicc.com<span class="hljs-regexp">/pkgs/</span>Ascend-docker-runtime_5.<span class="hljs-number">0</span>.RC1_linux-aarch64.run<br>chmod +x Ascend-docker-runtime_5.<span class="hljs-number">0</span>.RC1_linux-aarch64.run<br></code></pre></td></tr></table></figure><p>安装</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">./Ascend-docker-runtime_5.<span class="hljs-number">0</span><span class="hljs-selector-class">.RC1_linux-aarch64</span><span class="hljs-selector-class">.run</span> <span class="hljs-attr">--install</span><br></code></pre></td></tr></table></figure><h3 id="4-3-重启docker"><a href="#4-3-重启docker" class="headerlink" title="4.3 重启docker"></a>4.3 重启docker</h3><p><code>service docker restart</code></p><h2 id="5-安装obs工具"><a href="#5-安装obs工具" class="headerlink" title="5. 安装obs工具"></a>5. 安装obs工具</h2><p>临时写入系统环境</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/home/</span>work/sofaware<br>cd <span class="hljs-regexp">/home/</span>work/sofaware<br>wget https:<span class="hljs-regexp">//</span>obs-community.obs.cn-north-<span class="hljs-number">1</span>.myhuaweicloud.com<span class="hljs-regexp">/obsutil/</span>current/obsutil_linux_arm64.tar.gz<br><br>tar -zxvf obsutil_linux_arm64.tar.gz<br><br>cd obsutil_linux_arm64_5.<span class="hljs-number">4.11</span>/<br><br>chmod <span class="hljs-number">755</span> obsutil<br><br>export PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-regexp">/home/</span>work<span class="hljs-regexp">/sofaware/</span>obsutil_linux_arm64_5.<span class="hljs-number">4.11</span><br></code></pre></td></tr></table></figure><h2 id="6-拉取chatglm权重"><a href="#6-拉取chatglm权重" class="headerlink" title="6. 拉取chatglm权重"></a>6. 拉取chatglm权重</h2><p>ak、sk要替换上，权重在自己的obs上可以下载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">export PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-regexp">/home/</span>work<span class="hljs-regexp">/sofaware/</span>obsutil_linux_arm64_5.<span class="hljs-number">4.11</span><br><br>obsutil config -i= -k= -e=obs.cn-east-xxx.nbaicc.com<br><br>mkdir -p <span class="hljs-regexp">/home/</span>work/weights<br><br>obsutil sync obs:<span class="hljs-regexp">//</span>lfx<span class="hljs-regexp">/weights/g</span>lm<span class="hljs-regexp">/ /</span>home<span class="hljs-regexp">/work/</span>weights<span class="hljs-regexp">/glm/</span><br><br>chmod <span class="hljs-number">777</span> -R <span class="hljs-regexp">/home/</span>work<span class="hljs-regexp">/weights/g</span>lm/<br></code></pre></td></tr></table></figure><h2 id="7-拉取mindspore代码"><a href="#7-拉取mindspore代码" class="headerlink" title="7. 拉取mindspore代码"></a>7. 拉取mindspore代码</h2><h3 id="7-1-安装git"><a href="#7-1-安装git" class="headerlink" title="7.1 安装git"></a>7.1 安装git</h3><p><code>yum install -y git</code></p><h3 id="7-2-拉取代码"><a href="#7-2-拉取代码" class="headerlink" title="7.2 拉取代码"></a>7.2 拉取代码</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/home/</span>work<br>git clone https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/mindspore/mi</span>ndformers.git<br>chmod <span class="hljs-number">777</span> -R <span class="hljs-regexp">/home/</span>work/mindformers<br></code></pre></td></tr></table></figure><h3 id="8-拉取镜像"><a href="#8-拉取镜像" class="headerlink" title="8. 拉取镜像"></a>8. 拉取镜像</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">docker login -u cn-east-xxx@xxx -<span class="hljs-selector-tag">p</span> xxx swr<span class="hljs-selector-class">.cn-east-xxx</span><span class="hljs-selector-class">.nbaicc</span><span class="hljs-selector-class">.com</span><br><br>docker pull swr<span class="hljs-selector-class">.cn-east-xxx</span><span class="hljs-selector-class">.nbaicc</span>.com/nbaicc_pub/ms20rc1_py39_cann63:<span class="hljs-number">2023062601</span><br></code></pre></td></tr></table></figure><h2 id="9-新建docker容器"><a href="#9-新建docker容器" class="headerlink" title="9. 新建docker容器"></a>9. 新建docker容器</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -it \<br>    --device=<span class="hljs-regexp">/dev/</span>davinci0 \<br>    --device=<span class="hljs-regexp">/dev/</span>davinci_manager \<br>    --device=<span class="hljs-regexp">/dev/</span>devmm_svm \<br>    --device=<span class="hljs-regexp">/dev/</span>hisi_hdc \<br>    -v <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>npu-smi:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>npu-smi \<br>    -v <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Ascend/</span>driver<span class="hljs-regexp">/lib64/</span>common:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Ascend/</span>driver<span class="hljs-regexp">/lib64/</span>common \<br>    -v <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Ascend/</span>driver<span class="hljs-regexp">/lib64/</span>driver:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Ascend/</span>driver<span class="hljs-regexp">/lib64/</span>driver \<br>    -v <span class="hljs-regexp">/etc/</span>ascend_install.info:<span class="hljs-regexp">/etc/</span>ascend_install.info \<br>    -v <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Ascend/</span>driver<span class="hljs-regexp">/version.info:/u</span>sr<span class="hljs-regexp">/local/</span>Ascend<span class="hljs-regexp">/driver/</span>version.info \<br>    -v <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Ascend/</span>driver<span class="hljs-regexp">/version.info:/u</span>sr<span class="hljs-regexp">/local/</span>Ascend<span class="hljs-regexp">/driver/</span>version.info \<br>    -v <span class="hljs-regexp">/home/</span>work<span class="hljs-regexp">/weights/g</span>lm:<span class="hljs-regexp">/home/m</span>a-user<span class="hljs-regexp">/work/</span>checkpoint_download/glm \<br>    -v <span class="hljs-regexp">/home/</span>work<span class="hljs-regexp">/mindformers:/</span>home<span class="hljs-regexp">/ma-user/</span>work/mindformers \<br>    -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> \<br>    --privileged \<br>    --entrypoint=<span class="hljs-regexp">/bin/</span>bash \<br>    --user root \<br>swr.cn-east-xxx.nbaicc.com<span class="hljs-regexp">/nbaicc_pub/m</span>s20rc1_py39_cann63:<span class="hljs-number">2023062601</span><br></code></pre></td></tr></table></figure><h2 id="10-容器内操作"><a href="#10-容器内操作" class="headerlink" title="10. 容器内操作"></a>10. 容器内操作</h2><p>docker exec -it xxx &#x2F;bin&#x2F;bash</p><h3 id="10-1-切换环境"><a href="#10-1-切换环境" class="headerlink" title="10.1 切换环境"></a>10.1 切换环境</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;/home/ma-user/anaconda3/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br>source activate mindspore_py39<br></code></pre></td></tr></table></figure><h3 id="10-2-安装依赖"><a href="#10-2-安装依赖" class="headerlink" title="10.2 安装依赖"></a>10.2 安装依赖</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> fastapi <span class="hljs-string">&quot;uvicorn[standard]&quot;</span><br></code></pre></td></tr></table></figure><h3 id="10-3-新建web-demo-py"><a href="#10-3-新建web-demo-py" class="headerlink" title="10.3 新建web_demo.py"></a>10.3 新建web_demo.py</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> /home/<span class="hljs-keyword">ma</span>-user/work<br><span class="hljs-keyword">vi</span> web_demo.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>内容如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> fastapi import FastAPI, Request,Body<br>import uvicorn, json, datetime<br>import time<br>import mindspore as ms<br>import numpy as np<br><span class="hljs-keyword">from</span> mindformers.models.glm import GLMConfig, GLMChatModel<br><span class="hljs-keyword">from</span> mindformers.models.glm.chatglm_6b_tokenizer import ChatGLMTokenizer<br><span class="hljs-keyword">from</span> mindformers.models.glm.glm_processor import process_response<br><span class="hljs-keyword">from</span> pydantic import BaseModel, validator, conint, constr<br>import ast<br><br><br>class QueryInfo(BaseModel):<br>    query: str<br>    history: str<br><br><br>app = FastAPI(<span class="hljs-attribute">docs_url</span>=<span class="hljs-string">&quot;/xx/docs&quot;</span>,)<br><br><br>@app.post(<span class="hljs-string">&quot;/xx&quot;</span>)<br>async def create_item(queryinfo:QueryInfo):<br>    query = queryinfo.query<br>    history = queryinfo.history<br><br>    <span class="hljs-built_in">print</span>(history,type(history))<br>    <span class="hljs-keyword">if</span> history == <span class="hljs-string">&#x27;[]&#x27;</span>:<br>        prompt = query<br>    <span class="hljs-keyword">else</span>:<br>        history = ast.literal_eval(history)<br>        prompt = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> i, (old_query, response) <span class="hljs-keyword">in</span> enumerate(history):<br>            prompt += <span class="hljs-string">&quot;[Round &#123;&#125;]\n问：&#123;&#125;\n答：&#123;&#125;\n&quot;</span>.format(i, old_query, response)<br>        prompt += <span class="hljs-string">&quot;[Round &#123;&#125;]\n问：&#123;&#125;\n答：&quot;</span>.format(len(history), query)<br>    inputs = tokenizer(prompt)<br><br>    start_time = time.time()<br>    <span class="hljs-built_in">print</span>(start_time)<br>    outputs = model.generate(np.expand_dims(np.array(inputs[<span class="hljs-string">&#x27;input_ids&#x27;</span>]).astype(np.int32), 0),<br>                             <span class="hljs-attribute">max_length</span>=config.max_decode_length, <span class="hljs-attribute">do_sample</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">top_p</span>=0.7, <span class="hljs-attribute">top_k</span>=1)<br>    end_time = time.time()<br>    <span class="hljs-built_in">print</span>(f<span class="hljs-string">&#x27;不准，generate speed: &#123;outputs[0].shape[0] / (end_time - start_time):.2f&#125; tokens/s&#x27;</span>)<br>    response = tokenizer.decode(outputs)<br>    response = process_response(response[0])<br>    <span class="hljs-keyword">if</span> history != <span class="hljs-string">&#x27;[]&#x27;</span>:<br>        history = history + [(query, response)]<br>    <span class="hljs-keyword">else</span>:<br>        history = [(query, response),]<br>    <span class="hljs-built_in">print</span>(response)<br><br>    answer = &#123;<br>        <span class="hljs-string">&quot;response&quot;</span>: response,<br>        <span class="hljs-string">&quot;history&quot;</span>: str(history),<br>        <span class="hljs-string">&quot;status&quot;</span>: 200,<br>        # <span class="hljs-string">&quot;time&quot;</span>: time<br>    &#125;<br>    return answer<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>   <span class="hljs-built_in"> config </span>= GLMConfig(<br>        <span class="hljs-attribute">position_encoding_2d</span>=<span class="hljs-literal">True</span>,<br>        <span class="hljs-attribute">use_past</span>=<span class="hljs-literal">True</span>,<br>        <span class="hljs-attribute">is_npu_acceleration</span>=<span class="hljs-literal">True</span>,<br>    )<br>    ms.set_context(<span class="hljs-attribute">mode</span>=ms.GRAPH_MODE, <span class="hljs-attribute">device_target</span>=<span class="hljs-string">&quot;Ascend&quot;</span>, <span class="hljs-attribute">device_id</span>=0)<br>    model = GLMChatModel(config)<br>    ms.load_checkpoint(<span class="hljs-string">&quot;./checkpoint_download/ms_weight/ms_glm_6b.ckpt&quot;</span>, model)<br>    tokenizer = ChatGLMTokenizer(<span class="hljs-string">&#x27;./checkpoint_download/ms_weight/ice_text.model&#x27;</span>)<br>    # 初始化提问，节约时间<br>    <br>    # 初始化提问，节约时间<br>    uvicorn.<span class="hljs-built_in">run</span>(app, <span class="hljs-attribute">host</span>=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-attribute">port</span>=30000, <span class="hljs-attribute">workers</span>=1)<br></code></pre></td></tr></table></figure><h3 id="10-4-启动服务"><a href="#10-4-启动服务" class="headerlink" title="10.4 启动服务"></a>10.4 启动服务</h3><p>启动需要些时间</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> /home/<span class="hljs-keyword">ma</span>-user/work<br># <span class="hljs-keyword">python</span> web_demo.<span class="hljs-keyword">py</span><br>nohup <span class="hljs-keyword">python</span> web_demo.<span class="hljs-keyword">py</span> &gt; api.<span class="hljs-built_in">log</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<br></code></pre></td></tr></table></figure><p>如图所示，表示启动成功<br><img src="https://cleansely.top:48083/i/2023/08/15/64db4d09bc224.jpg">    </p><h2 id="11-访问接口方式"><a href="#11-访问接口方式" class="headerlink" title="11. 访问接口方式"></a>11. 访问接口方式</h2><p>第一次回答较慢，history较长会报错</p><h3 id="11-1-接口访问"><a href="#11-1-接口访问" class="headerlink" title="11.1 接口访问"></a>11.1 接口访问</h3><p>自己电脑新建<code>api_test.py</code></p><p>内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> pprint<br>url = <span class="hljs-string">&#x27;http://x.x.x.x/&#x27;</span><br><br>history = <span class="hljs-string">&quot;[]&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    query = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请提问,stop退出:&quot;</span>)<br>    <span class="hljs-keyword">if</span> query == <span class="hljs-string">&#x27;stop&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br>    data = &#123;<br>        <span class="hljs-string">&quot;query&quot;</span>: query,<br>        <span class="hljs-string">&quot;history&quot;</span>: history<br>    &#125;<br>    rsp = requests.post(url, json=data)<br><br>    pprint.pprint(json.loads(rsp.text)[<span class="hljs-string">&#x27;response&#x27;</span>])<br>    is_history = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;是否继续历史，0或者1：&quot;</span>)<br>    <span class="hljs-keyword">if</span> is_history == <span class="hljs-string">&#x27;0&#x27;</span>:<br>        history = <span class="hljs-string">&#x27;[]&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        history = <span class="hljs-built_in">str</span>(json.loads(rsp.text)[<span class="hljs-string">&#x27;history&#x27;</span>])<br>        <span class="hljs-built_in">print</span>(history)<br></code></pre></td></tr></table></figure><p><img src="https://cleansely.top:48083/i/2023/08/15/64db4cfd7bb5e.jpg"></p><h3 id="11-2-fastapi自带网页访问"><a href="#11-2-fastapi自带网页访问" class="headerlink" title="11.2 fastapi自带网页访问"></a>11.2 fastapi自带网页访问</h3><p><a href="http://x.x.x.x/docs">http://x.x.x.x/docs</a></p><p>body举例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;天空是什么颜色&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;history&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;[]&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://cleansely.top:48083/i/2023/08/15/64db4cf628b0e.jpg"></p><p><img src="/media/16886261428403/16886319995700.jpg"></p><h2 id="12-后台日志输出"><a href="#12-后台日志输出" class="headerlink" title="12. 后台日志输出"></a>12. 后台日志输出</h2><p><img src="https://cleansely.top:48083/i/2023/08/15/64db4ce6114f5.png" alt="image-20230815180108049"></p>]]></content>
    
    
    <categories>
      
      <category>昇腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>modelarts</tag>
      
      <tag>mindformers</tag>
      
      <tag>chatglm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>plog日志查看</title>
    <link href="/2023/08/15/plog%E6%97%A5%E5%BF%97%E6%9F%A5%E7%9C%8B/"/>
    <url>/2023/08/15/plog%E6%97%A5%E5%BF%97%E6%9F%A5%E7%9C%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="plog日志查看"><a href="#plog日志查看" class="headerlink" title="plog日志查看"></a>plog日志查看</h1> <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cat ~<span class="hljs-regexp">/ascend/</span>log<span class="hljs-regexp">/debug/</span>plog/plog-* | <span class="hljs-keyword">grep</span> ERROR<br></code></pre></td></tr></table></figure><p> <img src="https://cleansely.top:48083/i/2023/08/15/64db0bec43a4b.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>昇腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>modelarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算子重复编译，间隔时间大等问题</title>
    <link href="/2023/08/15/%E7%AE%97%E5%AD%90%E9%87%8D%E5%A4%8D%E7%BC%96%E8%AF%91%EF%BC%8C%E9%97%B4%E9%9A%94%E6%97%B6%E9%97%B4%E5%A4%A7%E7%AD%89%E9%97%AE%E9%A2%98/"/>
    <url>/2023/08/15/%E7%AE%97%E5%AD%90%E9%87%8D%E5%A4%8D%E7%BC%96%E8%AF%91%EF%BC%8C%E9%97%B4%E9%9A%94%E6%97%B6%E9%97%B4%E5%A4%A7%E7%AD%89%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="算子重复编译，间隔时间大等问题"><a href="#算子重复编译，间隔时间大等问题" class="headerlink" title="算子重复编译，间隔时间大等问题"></a>算子重复编译，间隔时间大等问题</h1><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p><img src="https://cleansely.top:48083/i/2023/08/15/64db0b79c5b5e.jpg"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>参考网址<a href="https://www.hiascend.com/document/detail/zh/CANNCommunityEdition/63RC2alpha002/ptmoddevg/ptmigr/ptmigr_0045.html">算子二进制</a></p><p>动态shape场景下，在模型脚本的main_worker函数中配置进程级别的开关，配置为False。</p><p>首轮还是慢，后续显著加快</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">torch_npu.npu.set_compile_mode(<span class="hljs-attribute">jit_compile</span>=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>昇腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>modelarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gelu_impl函数优化</title>
    <link href="/2023/08/15/gelu-impl%E5%87%BD%E6%95%B0%E4%BC%98%E5%8C%96/"/>
    <url>/2023/08/15/gelu-impl%E5%87%BD%E6%95%B0%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="gelu-impl函数优化"><a href="#gelu-impl函数优化" class="headerlink" title="gelu_impl函数优化"></a>gelu_impl函数优化</h1><h2 id="原始代码"><a href="#原始代码" class="headerlink" title="原始代码"></a>原始代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gelu_impl</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;OpenAI&#x27;s gelu implementation.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0.5</span> * x * (<span class="hljs-number">1.0</span> + torch.tanh(<span class="hljs-number">0.7978845608028654</span> * x *                                       (<span class="hljs-number">1.0</span> + <span class="hljs-number">0.044715</span> * x * x)))<br></code></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>修改为：换成更快的fast_gelu</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gelu_impl</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;OpenAI&#x27;s gelu implementation.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> torch.fast_gelu(x)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>昇腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>modelarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>libgomp-d22c30c5.so 无法在静态 TLS 块中分配内存</title>
    <link href="/2023/08/15/libgomp-d22c30c5-so-%E6%97%A0%E6%B3%95%E5%9C%A8%E9%9D%99%E6%80%81-TLS-%E5%9D%97%E4%B8%AD%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98/"/>
    <url>/2023/08/15/libgomp-d22c30c5-so-%E6%97%A0%E6%B3%95%E5%9C%A8%E9%9D%99%E6%80%81-TLS-%E5%9D%97%E4%B8%AD%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1 id="libgomp-d22c30c5-so-无法在静态-TLS-块中分配内存"><a href="#libgomp-d22c30c5-so-无法在静态-TLS-块中分配内存" class="headerlink" title="libgomp-d22c30c5.so 无法在静态 TLS 块中分配内存"></a>libgomp-d22c30c5.so 无法在静态 TLS 块中分配内存</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>libgomp-d22c30c5.so 无法在静态 TLS 块中分配内存<br>libgomp-d22c30c5.so.1.0.0:cannot allocate memory in static TLS block</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>解决方法：在环境变量LD_PRELOAD中添加 libgomp-d22c30c5.so 路径</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> scikit-learn<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">find</span> / -name libgomp-d22c30c5.so.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">LD_PRELOAD</span>=<span class="hljs-variable">$LD_PRELOAD</span>:&lt;绝对路径&gt;/libgomp-d22c30c5.so.1.0.0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>昇腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>modelarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>torch.multinomial相关报错</title>
    <link href="/2023/08/15/torch-multinomial%E7%9B%B8%E5%85%B3%E6%8A%A5%E9%94%99/"/>
    <url>/2023/08/15/torch-multinomial%E7%9B%B8%E5%85%B3%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="torch-multinomial相关报错"><a href="#torch-multinomial相关报错" class="headerlink" title="torch.multinomial相关报错"></a>torch.multinomial相关报错</h1><p>该算子在老版本 CANN 包中存在 BUG，即使将其修改到cpu运行，也会报错。</p><h2 id="报错相关语句"><a href="#报错相关语句" class="headerlink" title="报错相关语句"></a>报错相关语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">next_tokens = torch.multinomial(probs, num_samples=<span class="hljs-number">1</span>).squeeze(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import numpy as np<br>probs = probs<span class="hljs-selector-class">.flatten</span>()<span class="hljs-selector-class">.cpu</span>()<span class="hljs-selector-class">.numpy</span>()<span class="hljs-selector-class">.astype</span>(<span class="hljs-string">&#x27;float64&#x27;</span>)<br>sum_probs = np<span class="hljs-selector-class">.absolute</span>(probs)<span class="hljs-selector-class">.sum</span>()<br>probs = probs/sum_probs<br>next_tokens = np<span class="hljs-selector-class">.random</span><span class="hljs-selector-class">.multinomial</span>(<span class="hljs-number">1</span>, probs)<br>next_tokens = next_tokens<span class="hljs-selector-class">.argmax</span>()<br>next_tokens = torch<span class="hljs-selector-class">.tensor</span>(next_tokens)<span class="hljs-selector-class">.npu</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>昇腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>modelarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>no moudle named tk.graph</title>
    <link href="/2023/08/15/no-moudle-named-tk-graph/"/>
    <url>/2023/08/15/no-moudle-named-tk-graph/</url>
    
    <content type="html"><![CDATA[<h1 id="no-moudle-named-tk-graph"><a href="#no-moudle-named-tk-graph" class="headerlink" title="no moudle named tk.graph"></a>no moudle named tk.graph</h1><p>pip install mindpet</p>]]></content>
    
    
    <categories>
      
      <category>昇腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>modelarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ImportError: libGL.so.1</title>
    <link href="/2023/08/15/ImportError-libGL-so-1/"/>
    <url>/2023/08/15/ImportError-libGL-so-1/</url>
    
    <content type="html"><![CDATA[<h1 id="ImportError-libGL-so-1-cannot-open-shared-object-file-No-such-file-or-directory"><a href="#ImportError-libGL-so-1-cannot-open-shared-object-file-No-such-file-or-directory" class="headerlink" title="ImportError: libGL.so.1: cannot open shared object file: No such file or directory"></a>ImportError: libGL.so.1: cannot open shared object file: No such file or directory</h1><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><p>先换源</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> mesa-libGL -y<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>昇腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>modelarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>其他obs互传</title>
    <link href="/2023/08/15/%E5%85%B6%E4%BB%96obs%E4%BA%92%E4%BC%A0/"/>
    <url>/2023/08/15/%E5%85%B6%E4%BB%96obs%E4%BA%92%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="其他obs互传"><a href="#其他obs互传" class="headerlink" title="其他obs互传"></a>其他obs互传</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> modelarts.session <span class="hljs-keyword">import</span> Session<br>session = Session(access_key=<span class="hljs-string">&#x27;&#x27;</span>,secret_key=<span class="hljs-string">&#x27;&#x27;</span>, project_id=<span class="hljs-string">&#x27;cn-east-xxx&#x27;</span>, region_name=<span class="hljs-string">&#x27;cn-east-xxx&#x27;</span>)<br><br>session.obs.download_dir(src_obs_dir=<span class="hljs-string">&quot;obs://lfx/vicuna-7b&quot;</span>, dst_local_dir=<span class="hljs-string">&quot;./&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>昇腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>modelarts</tag>
      
      <tag>obs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>obs拷贝文件到notebook</title>
    <link href="/2023/08/15/obs%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%E5%88%B0notebook/"/>
    <url>/2023/08/15/obs%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%E5%88%B0notebook/</url>
    
    <content type="html"><![CDATA[<h1 id="obs拷贝文件到notebook"><a href="#obs拷贝文件到notebook" class="headerlink" title="obs拷贝文件到notebook"></a>obs拷贝文件到notebook</h1><h2 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> modelarts.session <span class="hljs-keyword">import</span> Session<br><br>session = Session()<br>session.obs.download_file(src_obs_file=<span class="hljs-string">&quot;obs://path/model.zip&quot;</span>, dst_local_dir=<span class="hljs-string">&quot;./&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="文件夹拷贝"><a href="#文件夹拷贝" class="headerlink" title="文件夹拷贝"></a>文件夹拷贝</h2><p>dir01目录会出现在.&#x2F;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> modelarts.session <span class="hljs-keyword">import</span> Session<br><br>session = Session()<br>session.obs.download_dir(src_obs_dir=<span class="hljs-string">&quot;obs://path/dir01/&quot;</span>, dst_local_dir=<span class="hljs-string">&quot;./&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>昇腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>modelarts</tag>
      
      <tag>obs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>notebook拷贝到obs</title>
    <link href="/2023/08/15/notebook%E6%8B%B7%E8%B4%9D%E5%88%B0obs/"/>
    <url>/2023/08/15/notebook%E6%8B%B7%E8%B4%9D%E5%88%B0obs/</url>
    
    <content type="html"><![CDATA[<h1 id="notebook拷贝到obs"><a href="#notebook拷贝到obs" class="headerlink" title="notebook拷贝到obs"></a>notebook拷贝到obs</h1><h2 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h2><p>文件可以从demo.py重命名成test.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> moxing <span class="hljs-keyword">as</span> mox<br>mox.file.copy(<span class="hljs-string">&#x27;./demo.py&#x27;</span>, <span class="hljs-string">&#x27;obs://path/test.py&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="文件夹拷贝"><a href="#文件夹拷贝" class="headerlink" title="文件夹拷贝"></a>文件夹拷贝</h2><p>文件夹test_dir会被重命名成test_path</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> moxing <span class="hljs-keyword">as</span> mox<br>mox.file.copy_parallel(<span class="hljs-string">&#x27;./test_dir&#x27;</span>, <span class="hljs-string">&#x27;obs://path/test_path&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>昇腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>modelarts</tag>
      
      <tag>obs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kill杀掉ps、grep组合</title>
    <link href="/2023/08/15/kill%E6%9D%80%E6%8E%89ps%E3%80%81grep%E7%BB%84%E5%90%88/"/>
    <url>/2023/08/15/kill%E6%9D%80%E6%8E%89ps%E3%80%81grep%E7%BB%84%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="kill杀掉ps、grep组合"><a href="#kill杀掉ps、grep组合" class="headerlink" title="kill杀掉ps、grep组合"></a>kill杀掉ps、grep组合</h1><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">ps -ef |<span class="hljs-keyword">grep</span> %s |<span class="hljs-keyword">grep</span> -v <span class="hljs-keyword">grep</span> |awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs <span class="hljs-keyword">kill</span> -<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>昇腾</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>修改repo源 换源</title>
    <link href="/2023/08/15/%E4%BF%AE%E6%94%B9repo%E6%BA%90-%E6%8D%A2%E6%BA%90/"/>
    <url>/2023/08/15/%E4%BF%AE%E6%94%B9repo%E6%BA%90-%E6%8D%A2%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h1 id="修改repo源"><a href="#修改repo源" class="headerlink" title="修改repo源"></a>修改repo源</h1><h2 id="修改源"><a href="#修改源" class="headerlink" title="修改源"></a>修改源</h2><p>sudo vi &#x2F;etc&#x2F;yum.repos.d&#x2F;EulerOS.repo</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">[base]<br>name=EulerOS-<span class="hljs-number">2.0</span>SP8 base<br>baseurl=http:<span class="hljs-regexp">//</span>repo.huaweicloud.com<span class="hljs-regexp">/euler/</span><span class="hljs-number">2.8</span><span class="hljs-regexp">/os/</span>aarch64/<br>enabled=<span class="hljs-number">1</span><br>gpgcheck=<span class="hljs-number">1</span><br>gpgkey=http:<span class="hljs-regexp">//</span>repo.huaweicloud.com<span class="hljs-regexp">/euler/</span><span class="hljs-number">2.8</span><span class="hljs-regexp">/os/</span>RPM-GPG-KEY-EulerOS<br></code></pre></td></tr></table></figure><p>sudo yum clean all<br>sudo yum makecache</p>]]></content>
    
    
    <categories>
      
      <category>昇腾</category>
      
    </categories>
    
    
    <tags>
      
      <tag>modelarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>apple music歌单导入qq音乐</title>
    <link href="/2023/08/12/apple-music%E6%AD%8C%E5%8D%95%E5%AF%BC%E5%85%A5qq%E9%9F%B3%E4%B9%90/"/>
    <url>/2023/08/12/apple-music%E6%AD%8C%E5%8D%95%E5%AF%BC%E5%85%A5qq%E9%9F%B3%E4%B9%90/</url>
    
    <content type="html"><![CDATA[<p>听歌软件从apple music换到了qq音乐，使用的是安卓手机，歌单的导入没找到合适的方式，就开始折腾了</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在apple music的app上分享歌单获取web网址，查看源码获取歌单的html信息，解析出歌名</p><h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><h3 id="分享歌单"><a href="#分享歌单" class="headerlink" title="分享歌单"></a>分享歌单</h3><p>分享歌单到微信等软件，复制web地址到游览器打开</p><p><img src="http://cleansely.top:48083/i/2023/08/12/64d791766d46f.jpg" alt="Screenshot_20230812_220140"></p><h3 id="找到歌单相关信息"><a href="#找到歌单相关信息" class="headerlink" title="找到歌单相关信息"></a>找到歌单相关信息</h3><p>右键查看网页源码，搜索某个歌名找到对应歌单列表的信息</p><p><img src="http://cleansely.top:48083/i/2023/08/12/64d79198cb492.png" alt="image-20230812220508063"></p><p><img src="http://cleansely.top:48083/i/2023/08/12/64d791fcd10a4.png" alt="image-20230812220646193"></p><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><p>很规范的字典列表嵌套，直接输出即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;...&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a[<span class="hljs-string">&#x27;track&#x27;</span>]:<br>    <span class="hljs-built_in">print</span>(i[<span class="hljs-string">&#x27;name&#x27;</span>].split(<span class="hljs-string">&quot;(&quot;</span>)[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p><img src="http://cleansely.top:48083/i/2023/08/12/64d7926f69b36.png" alt="image-20230812220843281"></p><h3 id="qq音乐导入"><a href="#qq音乐导入" class="headerlink" title="qq音乐导入"></a>qq音乐导入</h3><p>之前可以成功导入，这次导入不行，不知道发生了什么</p><p><img src="http://cleansely.top:48083/i/2023/08/12/64d7938872f5a.jpg" alt="Screenshot_20230812_221037"></p><p><img src="http://cleansely.top:48083/i/2023/08/12/64d79392df9a7.jpg" alt="Screenshot_20230812_221255"></p>]]></content>
    
    
    <categories>
      
      <category>折腾日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
